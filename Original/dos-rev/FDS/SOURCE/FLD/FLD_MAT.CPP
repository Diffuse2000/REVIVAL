/*
		 Flood Demo System - Flood scene material utility
		 -------------------------------------------------
*/

#include <STDIO.H>
#include <DOS.H>
#include <STDLIB.H>
#include <CONIO.H>
#include <STRING.H>
#include <MATH.H>

#include "..\FDS_DEFS.h"
#include "..\FDS_VARS.h"
#include "..\FDS_DECS.h"

#include "LWRead.H"
#include "FLD_Read.H"

//#define DebugMode

void AddMaterial(FldMat *OrgMat,Scene *SceneGroup)
{
	Material *Temp;
	char *Image;
	Texture *Tx;

	if (!OrgMat) return;

	if (!MatLib)
	{
		MatLib=new Material;
		CurMat=MatLib;
	}
	else
	{
		CurMat->Next=new Material;
		CurMat=CurMat->Next;
	}
	memset(CurMat,0,sizeof(Material));
	CurMat->Name=OrgMat->Name;
	CurMat->Flags=0;
	CurMat->Diffuse=OrgMat->Diffuse*0.01;
	CurMat->Specular=OrgMat->Specular*0.01;
	CurMat->RelScene=SceneGroup;
	if (!(*OrgMat->TextureImage)) return;
	Image=new char[strlen(OrgMat->TextureImage) + 15];
	strcpy(Image,"Textures//");
	strcat(Image,OrgMat->TextureImage);
	for (Temp=MatLib;Temp!=CurMat;Temp=Temp->Next)
	{
		if (Temp->RelScene!=SceneGroup) continue;
		if (Temp->Txtr)
			if (!strcmp(Temp->Txtr->FileName,Image))
			{
				CurMat->Txtr=Temp->Txtr;
				break;
			}
	}
	if (Temp==CurMat)
	{
		Tx=new Texture;
		memset(Tx,0,sizeof(Texture));
		Tx->FileName=strdup(Image);
#ifdef DebugMode
		printf("Attempting to identify texture \"%s\"...\n",Image);
#endif
		Identify_Texture(Tx);
		if (!Tx->BPP)
		{
			printf("Error identifying texture \"%s\"!\n",Image);
			delete Tx;
			CurMat->Txtr=NULL;
		} else CurMat->Txtr = Tx;
	}

	// Copy information from material structs
	CurMat->TFlags = OrgMat->Flags;
	CurMat->BaseCol.R = OrgMat->Color.Red;
	CurMat->BaseCol.G = OrgMat->Color.Green;
	CurMat->BaseCol.B = OrgMat->Color.Blue;
	CurMat->Luminosity = OrgMat->Luminosity;
	CurMat->Reflection = OrgMat->Reflection;
	CurMat->Transparency = OrgMat->Transparency;
	CurMat->Glossiness = OrgMat->Glossiness;
	CurMat->ReflectionMode = OrgMat->ReflectionMode;
	CurMat->ReflectionImage = OrgMat->ReflectionImage;
	CurMat->ReflectionSeamAngle = OrgMat->ReflectionSeamAngle;
	CurMat->RefractiveIndex = OrgMat->RefractiveIndex;
	CurMat->EdgeTransparency = OrgMat->EdgeTransparency;
	CurMat->MaxSmoothingAngle = OrgMat->MaxSmoothingAngle;
	CurMat->ColorTexture = OrgMat->ColorTexture;
	CurMat->DiffuseTexture = OrgMat->DiffuseTexture;
	CurMat->SpecularTexture = OrgMat->SpecularTexture;
	CurMat->ReflectionTexture = OrgMat->ReflectionTexture;
	CurMat->TransparencyTexture = OrgMat->TransparencyTexture;
	CurMat->BumpTexture = OrgMat->BumpTexture;
	CurMat->TextureFlags = OrgMat->TextureFlags;
	CurMat->TextureSize = OrgMat->TextureSize;
	CurMat->TextureCenter = OrgMat->TextureCenter;
	CurMat->TextureFallOff = OrgMat->TextureFallOff;
	CurMat->TextureVelocity = OrgMat->TextureVelocity;
	CurMat->TextureAlpha = OrgMat->TextureAlpha;
	CurMat->NoiseFrequencies = OrgMat->NoiseFrequencies;
	CurMat->TextureWrapX = OrgMat->TextureWrapX;
	CurMat->TextureWrapY = OrgMat->TextureWrapY;
	CurMat->AAStrength = OrgMat->AAStrength;
	CurMat->Opacity = OrgMat->Opacity;
	if (CurMat->TFlags&Surf_Smoothing) CurMat->Flags |= Mat_RGBInterp;
	if (CurMat->TFlags&Surf_DoubleSided) CurMat->Flags |= Mat_TwoSided;
	if (CurMat->Transparency>0.0) CurMat->Flags |= Mat_Transparent;

	if (CurMat->TextureFlags&Texture_WorldCoords)
		printf("WARNING! World coordinates are currently unsupported!\n (%s)",CurMat->Name);

	delete Image;
}


// Cartesian Coordinates ==> Cylindrical Coordinates
void xyztoh(float x,float y,float z,float *h)
{
	if (x == 0.0 && z == 0.0) *h = 0.0;
	else
	{
		if (z == 0.0)
			*h = (x < 0.0) ? PI_D2 : -PI_D2;
		else if (z < 0.0)
			*h = -atan(x / z) + PI;
		else
			*h = -atan(x / z);
	}
}

//Cartesian Coordinates ==> Spherical Coordinates
void xyztohp(float x,float y,float z,float *h,float *p)
{
	if (x == 0.0 && z == 0.0)
	{
		*h = 0.0;
		if (y != 0.0)
			*p = (y < 0.0) ? -PI_D2 : PI_D2;
		else
			*p = 0.0;
	}
	else
	{
		if (z == 0.0)
			*h = (x < 0.0) ? PI_D2 : -PI_D2;
		else if (z < 0.0)
			*h = -atan(x / z) + PI;
		else
			*h = -atan(x / z);
		x = sqrt(x * x + z * z);
		if (x == 0.0)
			*p = (y < 0.0) ? -PI_D2 : PI_D2;
		else
			*p = atan(y / x);
	}
}

float fract(float f)
{
/*	if (f >= 0.0 && f <= 1.0)
		return f*256.0;
	else
		return (f-floor(f))*256.0;*/
		return f*256.0f;
}

void Get_UV(Face *F,Vertex *Vtx,FldMat *Mat)
{
	Vector W,U,V,N;
	float s,t,lon,lat;

	Vector_Sub(&Vtx->Pos,&Mat->TextureCenter,&V);

	if (!strcmp(Mat->ColorTexture,"Planar Image Map"))
	{
		s = (Mat->TextureFlags&Texture_XAxis) ? V.Z / Mat->TextureSize.Z + .5 :
			V.X / Mat->TextureSize.X + .5;
		t = (Mat->TextureFlags&Texture_YAxis) ? -V.Z / Mat->TextureSize.Z + .5 :
			-V.Y / Mat->TextureSize.Y + .5;

		Vtx->U = fract(s);
		Vtx->V = fract(t);
#ifdef DebugMode
		printf("Mapping Coordinates (%f,%f) using Planar mapping...\n",Vtx->U,Vtx->V);
#endif
	}
	else if (!strcmp(Mat->ColorTexture,"Cylindrical Image Map"))
	{
		if (Mat->TextureFlags&Texture_XAxis) {
			xyztoh(V.Z,V.X,-V.Y,&lon);
			t = -V.X / Mat->TextureSize.X + .5;
		}
		else if (Mat->TextureFlags&Texture_YAxis) {
			xyztoh(-V.X,V.Y,V.Z,&lon);
			t = -V.Y / Mat->TextureSize.Y + .5;
		} else {
			xyztoh(-V.X,V.Z,-V.Y,&lon);
			t = -V.Z / Mat->TextureSize.Z + .5;
		}
		lon = 1.0 - lon / PI_M2;
/*		if (Mat->TextureWrapX != 1)
			lon = fract(lon) * Mat->TextureWrapX;*/
		Vtx->U = fract(lon);//(lon-floor(lon))*256.0;
		Vtx->V = fract(t);//(t-floor(t))*256.0;
#ifdef DebugMode
		printf("Mapping Coordinates (%f,%f) using Cylindrical mapping...\n",Vtx->U,Vtx->V);
#endif
	}
	else if (!strcmp(Mat->ColorTexture,"Spherical Image Map"))
	{
		if (Mat->TextureFlags&Texture_XAxis)
			xyztohp(V.Z,V.X,-V.Y,&lon,&lat);
		else if (Mat->TextureFlags&Texture_YAxis)
			xyztohp(-V.X,V.Y,V.Z,&lon,&lat);
		else
			xyztohp(-V.X,V.Z,-V.Y,&lon,&lat);
		lon = 1.0 - lon / PI_M2;
		lat = 0.5 - lat / PI;

/*		 if (widthTiling != 1.0)
			 lon = fract(lon) * widthTiling;
		 if (heightTiling != 1.0)
			 lat = fract(lat) * heightTiling;*/
		Vtx->U = fract(lon);//(lon-floor(lon))*256.0;
		Vtx->V = fract(lat);//(lat-floor(lat))*256.0;
#ifdef DebugMode
		printf("Mapping Coordinates (%f,%f) using Spherical mapping...\n",Vtx->U,Vtx->V);
#endif
	} else if (!strcmp(Mat->ColorTexture,"Cubic Image Map"))
	{
		Vector_Sub(&F->B->Pos,&F->A->Pos,&U);
		Vector_Sub(&F->C->Pos,&F->A->Pos,&W);
		Cross_Product(&U,&W,&N);
		N.X = fabs(N.X); N.Y = fabs(N.Y); N.Z = fabs(N.Z);
		char XAxis=0,YAxis=0;

		if (N.X>N.Y&&N.X>N.Z) XAxis=1;
		else if (N.Y>N.X&&N.Y>N.Z) YAxis=1;

		s = (XAxis) ?  V.Z / Mat->TextureSize.Z :  V.X / Mat->TextureSize.X;
		t = (YAxis) ? -V.Z / Mat->TextureSize.Z :	-V.Y / Mat->TextureSize.Y;

		s += .5; t += .5;

		Vtx->U = fract(s);
		Vtx->V = fract(t);

#ifdef DebugMode
		printf("Mapping Coordinates (%f,%f) using Spherical mapping...\n",Vtx->U,Vtx->V);
#endif
	}
/*	else if (Mat->ColorTexture[0]!=0)
		printf("Warning! Color texture \"%s\" is illegal!\n",Mat->ColorTexture);*/
}


void Get_Mapping(Face *F,FldMat *Mat)
{
	Get_UV(F,F->A,Mat);
	Get_UV(F,F->B,Mat);
	Get_UV(F,F->C,Mat);
	F->U1 = F->A->U;
	F->V1 = F->A->V;
	F->U2 = F->B->U;
	F->V2 = F->B->V;
	F->U3 = F->C->U;
	F->V3 = F->C->V;

}
