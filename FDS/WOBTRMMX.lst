Microsoft (R) Macro Assembler Version 10.00.30319.01	    07/08/11 23:14:43
C:\Projects\REVIVAL\FDS\IMGGENR\WOBTRMMX.asm		     Page 1 - 1


				.686
				.MMX
				.XMM

 00000000			_DATA		SEGMENT	PARA PUBLIC USE32 'DATA'
				align 4
 00000000			TempMMXVar				dq  0
	   0000000000000000
 00000008 00000000		Delta_Left_U            dd  0
 0000000C 00000000		Delta_Left_V            dd  0
 00000010 00000000		Delta_Left_R            dd  0
 00000014 00000000		Delta_Left_G            dd  0
 00000018 00000000		Delta_Left_B            dd  0
 0000001C 00000000		Delta_Right_U           dd  0
 00000020 00000000		Delta_Right_V           dd  0
 00000024 00000000		Delta_Right_R           dd  0
 00000028 00000000		Delta_Right_G           dd  0
 0000002C 00000000		Delta_Right_B           dd  0
 00000030 00000000		Left_U					dd  0
 00000034 00000000		Left_V                  dd  0
 00000038 00000000		Left_R					dd  0
 0000003C 00000000		Left_G                  dd  0
 00000040 00000000		Left_B                  dd  0
 00000044 00000000		Right_U                 dd  0
 00000048 00000000		Right_V                 dd  0
 0000004C 00000000		Right_R                 dd  0
 00000050 00000000		Right_G                 dd  0
 00000054 00000000		Right_B                 dd  0
 00000058 00000000		du                      dd  0
 0000005C 00000000		dv                      dd  0
 00000060 00000000		dr                      dd  0
 00000064 00000000		dg                      dd  0
 00000068 00000000		ddb                     dd  0
 0000006C 00000000		lu                      dd  0
 00000070 00000000		lv                      dd  0
 00000074 00000000		lr                      dd  0
 00000078 00000000		lg                      dd  0
 0000007C 00000000		lb                      dd  0
 00000080 00000000		ScanLine								dd  0
 00000084 00000000		PointsList              dd  0
 00000088 00000000		Texture		        			dd  0 ; this was in remark
 0000008C 00000000		x                       dd  0
 00000090 00000000		y								        dd  0
 00000094 00000000		Tebp       							dd  0
 00000098 00000000		t 						      		dd  0
 0000009C 00000000		counter									dd  0
 000000A0 000002D7		_WobMMX_Size	dd	ASM_FILE_END - _Grid_Texture_MapASMMX_
				align 1
				;ScreenWidth							equ 320
				;ScreenHeight						equ 240
				;PointsWidth							equ 40;ScreenWidth/8
				EXTRN _MMXWobNumOfHorizontalBlocks  : DWORD 
				EXTRN _MMXWobNumOfVerticalBlocks  : DWORD 
				EXTRN _MMXWobBlockJump  : DWORD ;(Block Size-1)*ScreenWidth*BPP
				EXTRN _MMXWobBPSL : DWORD 

				;_WobPointsHeight equ 30;ScreenHeight/8
 = 00000000			u												equ 0
 = 00000004			v												equ 4
 = 00000008			RGBA											equ 8
				; rbg - Packed Color
 = 00000014			ElementSize             equ 20
 000000A4			_DATA		ENDS


				.model flat

						PUBLIC	_WobMMX_Size

						PUBLIC	_Grid_Texture_MapASMMX_

 00000000			_TEXT	SEGMENT PARA PUBLIC 'CODE'
					ASSUME	cs:_TEXT, ds:_DATA

 00000000			_Grid_Texture_MapASMMX_:
 00000000  89 2D 00000094 R	    mov       [Tebp],ebp
 00000006  89 3D 00000080 R	    mov       [ScanLine],edi
 0000000C  89 0D 00000088 R	    mov       [Texture],ecx
 00000012  89 35 00000084 R	    mov       [PointsList],esi
 00000018  A1 00000000 E		mov eax,[_MMXWobNumOfHorizontalBlocks]
 0000001D  A3 0000008C R		mov [x],eax
 00000022  A1 00000000 E		mov eax,[_MMXWobNumOfVerticalBlocks]
 00000027  A3 00000090 R		mov [y],eax

 0000002C			@@DrawLoop:
 0000002C  8B 3D 00000000 E			mov edi, [_MMXWobNumOfHorizontalBlocks]
 00000032  8B 06				mov eax,[esi+u]
 00000034  47					inc edi
 00000035  8B CF				mov ecx,edi
 00000037  C1 E7 04				shl edi ,4
 0000003A  C1 E1 02				shl ecx,2

 0000003D  8B 5E 04				mov ebx,[esi+v]
 00000040  A3 00000030 R			mov [Left_U],eax
 00000045  03 F9				add edi,ecx
 00000047  89 1D 00000034 R			mov [Left_V],ebx
				;		mov		  ecx,[esi+ElementSize+ElementSize*PointsWidth+u] ; yes, yes , i know it's looks a LITTLE too much , but then , it's concludes in one add in the end ;)
				;		mov		  edx,[esi+ElementSize+ElementSize*PointsWidth+v]
 0000004D  8B 0C 37				mov		  ecx,[esi+edi+u] ; yes, yes , i know it's looks a LITTLE too much , but then , it's concludes in one add in the end ;)
 00000050  8B 54 37 04				mov		  edx,[esi+edi+v]
 00000054  2B C8				sub		  ecx,eax
 00000056  2B D3				sub		  edx,ebx
 00000058  C1 F9 03				sar		  ecx,3
 0000005B  8B 46 14				mov		  eax,[esi+ElementSize+u]
 0000005E  C1 FA 03				sar		  edx,3
 00000061  89 0D 00000008 R			mov		  [Delta_Left_U],ecx
 00000067  89 15 0000000C R			mov		  [Delta_Left_V],edx
 0000006D  8B 5E 18				mov		  ebx,[esi+ElementSize+v]
 00000070  A3 00000044 R			mov		  [Right_U],eax
 00000075  89 1D 00000048 R			mov		  [Right_V],ebx
				;		mov		  ecx,[esi+ElementSize*2+ElementSize*PointsWidth+u]
				;		mov		  edx,[esi+ElementSize*2+ElementSize*PointsWidth+v]
 0000007B  8B 4C 37 14				mov		  ecx,[esi + edi + u + ElementSize]
 0000007F  8B 54 37 18				mov		  edx,[esi + edi + v + ElementSize]
 00000083  2B C8				sub		  ecx,eax
 00000085  2B D3				sub		  edx,ebx
 00000087  C1 F9 03				sar		  ecx,3
 0000008A  89 0D 0000001C R			mov [Delta_Right_U],ecx
 00000090  89 15 00000020 R			mov [Delta_Right_V],edx

						; MMX stuff
						; MM4 - Left RGBA
						; MM5 - Delta Left RGBA 
						; MM6 - Right RGBA
						; MM7 - Delta Right RGBA 
 00000096  0F 6F 66 08				movq	mm4, [esi + RGBA]			; Left RGBA
 0000009A  0F 6F 6C 37 08			movq	mm5, [esi + edi + RGBA]		; Bottom Left RGBA
 0000009F  0F F9 EC				psubw	mm5, mm4
 000000A2  0F 71 E5 03				psraw	mm5, 3
 000000A6  0F 6F 76 1C				movq    mm6, [esi + ElementSize + RGBA]			; Right RGBA
 000000AA  0F 6F 7C 37 1C			movq    mm7, [esi + edi + ElementSize + RGBA]	; Bottom Right RGBA
 000000AF  0F F9 FE				psubw	mm7, mm6
 000000B2  0F 71 E7 03				psraw	mm7, 3

 000000B6  89 35 00000084 R			mov [PointsList],esi
 000000BC  8B 3D 00000080 R			mov edi,[ScanLine]
 000000C2  C7 05 0000009C R			mov [counter],8
	   00000008
 000000CC				@@Inner8:
							; MMX stuff
							; MM2 - Left RGBA
							; MM3 - Delta RGBA
 000000CC  0F 7F E2					movq	mm2, mm4
 000000CF  0F 7F F3					movq	mm3, mm6
 000000D2  0F F9 DA					psubw   mm3, mm2
 000000D5  0F 71 E3 03					psraw	mm3, 3
 000000D9  A1 00000030 R				mov eax,[Left_U]
 000000DE  8B 1D 00000034 R				mov ebx,[Left_V]
 000000E4  8B 0D 00000044 R				mov ecx,[Right_U]
 000000EA  8B 15 00000048 R				mov edx,[Right_V]
 000000F0  2B C8					sub ecx,eax
 000000F2  2B D3					sub edx,ebx
 000000F4  C1 F9 03					sar ecx,3
 000000F7  BB 00000000					mov ebx,0
 000000FC  C1 FA 03					sar edx,3
 000000FF  89 0D 00000058 R				mov [du],ecx
 00000105  89 15 0000005C R				mov [dv],edx
 0000010B  8B CA					mov ecx, edx 
 0000010D  C1 F9 20					sar ecx, 32
 00000110  83 F1 FF					xor ecx ,-1
 00000113  81 E1 00FF0000				and ecx,00FF0000h
 00000119  BA 00000000					mov edx,0
 0000011E  8A 1D 00000030 R				mov bl,byte ptr [Left_U]
 00000124  C1 E3 18					shl ebx,24
 00000127  8A 3D 00000035 R				mov bh,byte ptr [Left_V+1]
 0000012D  B8 00000000					mov eax,0
 00000132  8A 1D 00000034 R				mov bl,byte ptr [Left_V]
 00000138  A0 00000058 R				mov al,byte ptr [du]
 0000013D  BD 00000000					mov ebp,0
 00000142  C1 E0 18					shl eax,24
 00000145  0B C8					or  ecx,eax
 00000147  8A 15 00000031 R				mov dl,byte ptr [Left_U+1]
 0000014D  8A F7					mov dh,bh
 0000014F  B8 00000000					mov eax,0
 00000154  A0 00000059 R				mov al,byte ptr [du+1]
 00000159  8A 0D 0000005C R				mov cl,byte ptr [dv] ; chk this
 0000015F  8A 2D 0000005D R				mov ch,byte ptr [dv+1] ; chk this
 00000165  8B E8					mov ebp,eax
 00000167  8B 35 00000088 R				mov esi,[Texture]
				; inner loop (unrolled)

				;				mov			eax, [esi+edx*4]
 0000016D  0F 60 04 96						punpcklbw	mm0, [esi+edx*4]
 00000171  B6 00						mov   dh,0
 00000173  0F E4 C3						pmulhuw		mm0, mm3
 00000176  03 D9						add   ebx, ecx
				;				mov   [edi],eax
 00000178  13 D5						adc   edx, ebp
 0000017A  8A F7						mov   dh, bh

				;				mov   eax, [esi+edx*4]
 0000017C  0F 60 0C 96						punpcklbw	mm1, [esi+edx*4]
 00000180  B6 00						mov   dh,0
 00000182  0F E4 CB						pmulhuw		mm1, mm3
 00000185  0F 67 C1						packuswb	mm0,mm1
 00000188  03 D9						add   ebx, ecx
				;				mov   [edi+4],eax
 0000018A  0F 7F 07						movq  [edi], mm0
 0000018D  13 D5						adc   edx, ebp
 0000018F  8A F7						mov   dh, bh

 00000191  0F 60 04 96						punpcklbw	mm0, [esi+edx*4]
 00000195  B6 00						mov   dh,0
 00000197  0F E4 C3						pmulhuw		mm0, mm3
 0000019A  03 D9						add   ebx, ecx
 0000019C  13 D5						adc   edx, ebp
 0000019E  8A F7						mov   dh, bh
 000001A0  0F 60 0C 96						punpcklbw	mm1, [esi+edx*4]
 000001A4  B6 00						mov   dh,0
 000001A6  0F E4 CB						pmulhuw		mm1, mm3
 000001A9  0F 67 C1						packuswb	mm0,mm1
 000001AC  03 D9						add   ebx, ecx
 000001AE  0F 7F 47 08						movq  [edi + 8], mm0
 000001B2  13 D5						adc   edx, ebp
 000001B4  8A F7						mov   dh, bh

 000001B6  0F 60 04 96						punpcklbw	mm0, [esi+edx*4]
 000001BA  B6 00						mov   dh,0
 000001BC  0F E4 C3						pmulhuw		mm0, mm3
 000001BF  03 D9						add   ebx, ecx
 000001C1  13 D5						adc   edx, ebp
 000001C3  8A F7						mov   dh, bh
 000001C5  0F 60 0C 96						punpcklbw	mm1, [esi+edx*4]
 000001C9  B6 00						mov   dh,0
 000001CB  0F E4 CB						pmulhuw		mm1, mm3
 000001CE  0F 67 C1						packuswb	mm0,mm1
 000001D1  03 D9						add   ebx, ecx
 000001D3  0F 7F 47 10						movq  [edi+16], mm0
 000001D7  13 D5						adc   edx, ebp
 000001D9  8A F7						mov   dh, bh

 000001DB  0F 60 04 96						punpcklbw	mm0, [esi+edx*4]
 000001DF  B6 00						mov   dh,0
 000001E1  0F E4 C3						pmulhuw		mm0, mm3
 000001E4  03 D9						add   ebx, ecx
 000001E6  13 D5						adc   edx, ebp
 000001E8  8A F7						mov   dh, bh
 000001EA  0F 60 0C 96						punpcklbw	mm1, [esi+edx*4]
 000001EE  B6 00						mov   dh,0
 000001F0  0F E4 CB						pmulhuw		mm1, mm3
 000001F3  0F 67 C1						packuswb	mm0,mm1
 000001F6  03 D9						add   ebx, ecx
 000001F8  0F 7F 47 18						movq  [edi+24], mm0
 000001FC  13 D5						adc   edx, ebp
 000001FE  8A F7						mov   dh, bh

				; inner loop end (unrolled)
 00000200  83 EF 20					sub		  edi,32
 00000203  03 3D 00000000 E				add       edi,[_MMXWobBPSL]
 00000209  0F FD E5					paddw	  mm4, mm5		;	Left RGBA
 0000020C  0F FD F7					paddw	  mm6, mm7		;	Left RGBA
 0000020F  A1 00000030 R				mov       eax,[Left_U]
 00000214  8B 1D 00000034 R				mov       ebx,[Left_V]
 0000021A  8B 0D 00000008 R				mov       ecx,[Delta_Left_U]
 00000220  8B 15 0000000C R				mov       edx,[Delta_Left_V]
 00000226  03 C1					add       eax,ecx
 00000228  03 DA					add       ebx,edx
 0000022A  A3 00000030 R				mov       [Left_U],eax
 0000022F  89 1D 00000034 R				mov       [Left_V],ebx
 00000235  8B 1D 00000048 R				mov       ebx,[Right_V]
 0000023B  A1 00000044 R				mov       eax,[Right_U]
 00000240  8B 0D 0000001C R				mov       ecx,[Delta_Right_U]
 00000246  8B 15 00000020 R				mov       edx,[Delta_Right_V]
 0000024C  03 C1					add       eax,ecx
 0000024E  03 DA					add       ebx,edx
 00000250  A3 00000044 R				mov       [Right_U],eax
 00000255  89 1D 00000048 R				mov       [Right_V],ebx
 0000025B  8B 35 0000009C R				mov       esi,[Counter]
 00000261  4E						dec       esi
 00000262  89 35 0000009C R				mov       [Counter],esi
 00000268  0F 85 FFFFFE5E				jne       @@Inner8
 0000026E  A1 00000080 R			mov       eax,[ScanLine]
 00000273  83 C0 20				add       eax,32
 00000276  A3 00000080 R			mov       [ScanLine],eax
 0000027B  8B 35 00000084 R			mov       esi,[PointsList]
 00000281  8B 1D 0000008C R			mov       ebx,[x]
 00000287  4B					dec       ebx
 00000288  89 1D 0000008C R			mov       [x],ebx
 0000028E  0F 85 FFFFFD98		jne       @@DrawLoop
 00000294  8B 0D 00000000 E			mov		  ecx, [_MMXWobNumOfHorizontalBlocks]
 0000029A  89 0D 0000008C R			mov		  [x],ecx
 000002A0  8B 0D 00000080 R			mov       ecx,[ScanLine]
 000002A6  8B 1D 00000090 R			mov       ebx,[y]
 000002AC  03 0D 00000000 E			add		  ecx, [_MMXWobBlockJump];(8-1)*ScreenWidth*4
 000002B2  83 C6 14				add		  esi,ElementSize
 000002B5  89 35 00000084 R			mov       [PointsList],esi
 000002BB  89 0D 00000080 R			mov       [ScanLine],ecx
 000002C1  4B					dec       ebx
 000002C2  89 1D 00000090 R			mov       [y],ebx
 000002C8  0F 85 FFFFFD5E		jne       @@DrawLoop
 000002CE  8B 2D 00000094 R	    mov       ebp,[Tebp]
 000002D4  0F 77		    emms      
 000002D6  C3			    ret       

 000002D7 = 000002D7		ASM_FILE_END	equ	$

 000002D7			_TEXT		ENDS
				END
Microsoft (R) Macro Assembler Version 10.00.30319.01	    07/08/11 23:14:43
C:\Projects\REVIVAL\FDS\IMGGENR\WOBTRMMX.asm		     Symbols 2 - 1




Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
_DATA  . . . . . . . . . . . . .	32 Bit	 000000A4 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 000002D7 Para	  Public  'CODE'	


Symbols:

                N a m e                 Type     Value    Attr

@@DrawLoop . . . . . . . . . . .	L Near	 0000002C _TEXT	
@@Inner8 . . . . . . . . . . . .	L Near	 000000CC _TEXT	
@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000000h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ASM_FILE_END . . . . . . . . . .	Number	 000002D7h   
Delta_Left_B . . . . . . . . . .	DWord	 00000018 _DATA	
Delta_Left_G . . . . . . . . . .	DWord	 00000014 _DATA	
Delta_Left_R . . . . . . . . . .	DWord	 00000010 _DATA	
Delta_Left_U . . . . . . . . . .	DWord	 00000008 _DATA	
Delta_Left_V . . . . . . . . . .	DWord	 0000000C _DATA	
Delta_Right_B  . . . . . . . . .	DWord	 0000002C _DATA	
Delta_Right_G  . . . . . . . . .	DWord	 00000028 _DATA	
Delta_Right_R  . . . . . . . . .	DWord	 00000024 _DATA	
Delta_Right_U  . . . . . . . . .	DWord	 0000001C _DATA	
Delta_Right_V  . . . . . . . . .	DWord	 00000020 _DATA	
ElementSize  . . . . . . . . . .	Number	 00000014h   
Left_B . . . . . . . . . . . . .	DWord	 00000040 _DATA	
Left_G . . . . . . . . . . . . .	DWord	 0000003C _DATA	
Left_R . . . . . . . . . . . . .	DWord	 00000038 _DATA	
Left_U . . . . . . . . . . . . .	DWord	 00000030 _DATA	
Left_V . . . . . . . . . . . . .	DWord	 00000034 _DATA	
PointsList . . . . . . . . . . .	DWord	 00000084 _DATA	
RGBA . . . . . . . . . . . . . .	Number	 00000008h   
Right_B  . . . . . . . . . . . .	DWord	 00000054 _DATA	
Right_G  . . . . . . . . . . . .	DWord	 00000050 _DATA	
Right_R  . . . . . . . . . . . .	DWord	 0000004C _DATA	
Right_U  . . . . . . . . . . . .	DWord	 00000044 _DATA	
Right_V  . . . . . . . . . . . .	DWord	 00000048 _DATA	
ScanLine . . . . . . . . . . . .	DWord	 00000080 _DATA	
Tebp . . . . . . . . . . . . . .	DWord	 00000094 _DATA	
TempMMXVar . . . . . . . . . . .	QWord	 00000000 _DATA	
Texture  . . . . . . . . . . . .	DWord	 00000088 _DATA	
_Grid_Texture_MapASMMX_  . . . .	L Near	 00000000 _TEXT	Public
_MMXWobBPSL  . . . . . . . . . .	DWord	 00000000 _DATA	External
_MMXWobBlockJump . . . . . . . .	DWord	 00000000 _DATA	External
_MMXWobNumOfHorizontalBlocks . .	DWord	 00000000 _DATA	External
_MMXWobNumOfVerticalBlocks . . .	DWord	 00000000 _DATA	External
_WobMMX_Size . . . . . . . . . .	DWord	 000000A0 _DATA	Public
counter  . . . . . . . . . . . .	DWord	 0000009C _DATA	
ddb  . . . . . . . . . . . . . .	DWord	 00000068 _DATA	
dg . . . . . . . . . . . . . . .	DWord	 00000064 _DATA	
dr . . . . . . . . . . . . . . .	DWord	 00000060 _DATA	
du . . . . . . . . . . . . . . .	DWord	 00000058 _DATA	
dv . . . . . . . . . . . . . . .	DWord	 0000005C _DATA	
lb . . . . . . . . . . . . . . .	DWord	 0000007C _DATA	
lg . . . . . . . . . . . . . . .	DWord	 00000078 _DATA	
lr . . . . . . . . . . . . . . .	DWord	 00000074 _DATA	
lu . . . . . . . . . . . . . . .	DWord	 0000006C _DATA	
lv . . . . . . . . . . . . . . .	DWord	 00000070 _DATA	
t  . . . . . . . . . . . . . . .	DWord	 00000098 _DATA	
u  . . . . . . . . . . . . . . .	Number	 00000000h   
v  . . . . . . . . . . . . . . .	Number	 00000004h   
x  . . . . . . . . . . . . . . .	DWord	 0000008C _DATA	
y  . . . . . . . . . . . . . . .	DWord	 00000090 _DATA	

	   0 Warnings
	   0 Errors
