Microsoft (R) Macro Assembler Version 10.00.30319.01	    07/08/11 23:14:43
C:\Projects\REVIVAL\FDS\FILLERS\BITRUE.ASM		     Page 1 - 1


				comment &
				The BiTrue Mapper! ;)
				this piece of shit is just a quick job , i need to put sub texeling and sub
				pixeling , push a faster inner loop with cache considiration , but that's
				for later.
				the transperncy Mappper needs shr's by 1 textures , and ANDed with
				7fff7fff7fff7fffh or something like that ;) (opps , that was actually 7f7f7f7fh)
				btw , the transperncy mapper and the normal mapper are almost the same thing.
				in the CPP source , there is a DeJPEG example , and 32-->24 BPP fliper and
				stuff like that.
				i'll include also the unarjer.
				in case you couldn't find out yourself , bitrue.asm is the normal mapper , and
				the BiTTrue.asm is the transperncy mapper.

				Diffuse Out.
				&


				.686
				.MMX
				.XMM
 00000000			_DATA	SEGMENT DWORD PUBLIC 'DATA'
				align 4
 00000000 00000000		Left_Section         	dd 0
 00000004 00000000		Right_Section 	     	dd 0
 00000008 00000000		Left_Section_Height  	dd 0
 0000000C 00000000		Right_Section_Height 	dd 0
 00000010 00000000		Left_U 		     	dd 0.0 ; float
 00000014 00000000		Delta_left_U 	     	dd 0.0 ; float
 00000018 00000000		Left_V 		     	dd 0.0 ; float
 0000001C 00000000		Delta_left_V 	     	dd 0.0 ; float
 00000020 00000000		Left_Z                  dd 0.0 ; float
 00000024 00000000		Delta_left_Z            dd 0.0 ; float
 00000028 00000000		Right_Z                 dd 0.0 ; float
 0000002C 00000000		Delta_right_Z           dd 0.0 ; float
 00000030 00000000		Right_U                 dd 0.0 ; float
 00000034 00000000		Delta_right_U           dd 0.0 ; float
 00000038 00000000		Right_V                 dd 0.0 ; float
 0000003C 00000000		Delta_right_V           dd 0.0 ; float
 00000040 00000000		RevHeight               dd 0.0 ; float
 00000044 00000000		RevWidth                dd 0.0 ; float
 00000048 00000000		u0                      dd 0
 0000004C 00000000		v0                      dd 0
 00000050 00000000		u1                      dd 0
 00000054 00000000		v1                      dd 0
 00000058 00000000		du		      	dd 0
 0000005C 00000000		dv                      dd 0
 00000060 00000000		XWidth			dd 0
 00000064 00000000		Height			dd 0
 00000068 00000000		Longest			dd 0
 0000006C  00000003 [		Left_Array              dd 3 dup(0)
	    00000000
	   ]
 00000078  00000003 [		RIght_Array             dd 3 dup(0)
	    00000000
	   ]
 00000084 00000000		Left_X 			dd 0
 00000088 00000000		Delta_Left_X 		dd 0
 0000008C 00000000		Right_X 		dd 0
 00000090 00000000		Delta_Right_X 		dd 0
 00000094 00000000		BitMap                  dd 0
 00000098 00000000		Where                   dd 0
 0000009C 00000000		Top                     dd 0
 000000A0 00000000		Middle                  dd 0
 000000A4 00000000		Bottom                  dd 0
 000000A8 00000000		ScanLine		dd 0
 000000AC 00000000		TEBP			dd 0
 = 00000000			Vertex_X  equ 0
 = 00000004			Vertex_Y  equ 4
 = 00000008			Vertex_Z  equ 8
 = 0000000C			Vertex_U  equ 12
 = 00000010			Vertex_V  equ 16
 000000B0 3F800000		One       dd  1.0
 000000B4 41800000		Sixteen   dd  16.0
 000000B8 43800000		Sixtyfive dd  256.0

				EXTRN  _VESA_BPSL           : DWORD

					PUBLIC	_P_Texture_32_Size
 000000BC 0000059B		_P_Texture_32_Size	dd	CodeSize
					PUBLIC	_P_Texture_32_CodeStart
 000000C0 00000000 R		_P_Texture_32_CodeStart	dd	CodeStart
				align 1
 00C4				_DATA	ENDS

 00000000			_TEXT	SEGMENT BYTE PUBLIC 'CODE'
					ASSUME	cs:_TEXT, ds:_DATA

 00000000 = 00000000		CodeStart equ $

					PUBLIC	_P_Texture_32_
 00000000			_P_Texture_32_:
 00000000  89 2D 000000AC R	mov [TEBP],ebp

				;vtx in ebx , bitmap in eax , where in ecx

 00000006  A3 00000094 R	mov [BitMap],eax
 0000000B  BA 00000301 R	mov edx, offset Texture
 00000010  89 02		mov [edx],eax
 00000012  BA 000002F5 R	mov edx, offset Texture1
 00000017  89 02		mov [edx],eax
 00000019  89 0D 00000098 R	mov [Where],ecx

 0000001F  8B CB		mov ecx,ebx
 00000021  8B F3		mov esi,ebx
 00000023  8B FB		mov edi,ebx
 00000025  83 C6 14		add esi,20
 00000028  83 C7 28		add edi,40

				;ecx - vertex 1
				;esi - vertex 2
				;edi - vertex 3

 0000002B  8B 41 04		mov eax,[ecx+Vertex_Y]
 0000002E  3B 46 04		cmp eax,[esi+Vertex_Y]
 00000031  7E 02		jle @@sort1
 00000033  87 CE		xchg ecx,esi
 00000035			@@sort1:
 00000035  8B 41 04		mov eax,[ecx+Vertex_Y]
 00000038  3B 47 04		cmp eax,[edi+Vertex_Y]
 0000003B  7E 02		jle @@sort2
 0000003D  87 CF		xchg ecx,edi
 0000003F			@@sort2:
 0000003F  8B 46 04		mov eax,[esi+Vertex_Y]
 00000042  3B 47 04		cmp eax,[edi+Vertex_Y]
 00000045  7E 02		jle @@sort3
 00000047  87 F7		xchg esi,edi
 00000049			@@sort3:

 00000049  8B 5F 04		mov ebx,[edi+Vertex_Y]
 0000004C  2B 59 04		sub ebx,[ecx+Vertex_Y]
 0000004F  0F 84 0000040D	jz TextureEnd

				;    int temp = ((v2->y - v1->y) << 16) / height;
				;    int longest = temp * (v3->x - v1->x) + ((v1->x - v2->x) << 16);
				;eax-longest

 00000055  8B 46 04		mov eax,[esi+Vertex_Y]
 00000058  8B 29		mov ebp,[ecx+Vertex_X]
 0000005A  2B 41 04		sub eax,[ecx+Vertex_Y]
 0000005D  2B 2E		sub ebp,[esi+Vertex_X]
 0000005F  C1 E0 10		sal eax,16
 00000062  C1 E5 10		sal ebp,16
 00000065  8B D0		mov edx,eax
 00000067  C1 FA 1F		sar edx,31
 0000006A  F7 FB		idiv ebx
 0000006C  8B 1F		mov ebx,[edi+Vertex_X]
 0000006E  2B 19		sub ebx,[ecx+Vertex_X]
 00000070  F7 EB		imul ebx
 00000072  03 C5		add eax,ebp
 00000074  A3 00000068 R	mov [Longest],eax
 00000079  0F 84 000003E3	jz TextureEnd
 0000007F  7D 7D		jge LongestOverZero


 00000081  89 0D 0000009C R	mov [Top],ecx
 00000087  8B E9		mov ebp,ecx
 00000089  89 35 000000A0 R	mov [Middle],esi
 0000008F  89 3D 000000A4 R	mov [Bottom],edi
 00000095  89 3D 00000078 R	mov [Right_Array],edi
 0000009B  89 35 0000007C R	mov [Right_Array+4],esi
 000000A1  89 0D 00000080 R	mov [Right_Array+8],ecx
 000000A7  C7 05 00000004 R	mov [Right_Section],2
	   00000002

 000000B1  89 3D 0000006C R	mov [Left_Array],edi
 000000B7  89 0D 00000070 R	mov [Left_Array+4],ecx
 000000BD  C7 05 00000000 R	mov [Left_Section],1
	   00000001

 000000C7  E8 0000039D		call CalcLeftSection
 000000CC  83 FB 00		cmp ebx,0
 000000CF  0F 8E 0000038D	jle TextureEnd

 000000D5  E8 00000428		call CalcRightSection
 000000DA  83 FB 00		cmp ebx,0
 000000DD  0F 8F 00000092	jg FLSNZ  ; First Right Section Is Not Zero
 000000E3  A1 00000004 R	mov eax,[Right_Section]
 000000E8  48			dec eax
 000000E9  A3 00000004 R	mov [Right_Section],eax
 000000EE  E8 0000040F		call CalcRightSection
 000000F3  83 FB 00		cmp ebx,0
 000000F6  0F 8E 00000366	jle TextureEnd
 000000FC  EB 77		jmp FLSNZ

 000000FE			LongestOverZero:
 000000FE  89 0D 0000009C R	mov [Top],ecx
 00000104  8B E9		mov ebp,ecx
 00000106  89 35 000000A0 R	mov [Middle],esi
 0000010C  89 3D 000000A4 R	mov [Bottom],edi
 00000112  89 3D 0000006C R	mov [Left_Array],edi
 00000118  89 35 00000070 R	mov [Left_Array+4],esi
 0000011E  89 0D 00000074 R	mov [Left_Array+8],ecx
 00000124  C7 05 00000000 R	mov [Left_Section],2
	   00000002

 0000012E  89 3D 00000078 R	mov [Right_Array],edi
 00000134  89 0D 0000007C R	mov [Right_Array+4],ecx
 0000013A  C7 05 00000004 R	mov [Right_Section],1
	   00000001

 00000144  E8 000003B9		call CalcRightSection
 00000149  83 FB 00		cmp ebx,0
 0000014C  0F 8E 00000310	jle TextureEnd

 00000152  E8 00000312		call CalcLeftSection
 00000157  83 FB 00		cmp ebx,0
 0000015A  7F 19		jg FLSNZ  ; First Left Section Is Not Zero
 0000015C  A1 00000000 R	mov eax,[Left_Section]
 00000161  48			dec eax
 00000162  A3 00000000 R	mov [Left_Section],eax
 00000167  E8 000002FD		call CalcLeftSection
 0000016C  83 FB 00		cmp ebx,0
 0000016F  0F 8E 000002ED	jle TextureEnd
 00000175			FLSNZ:

 00000175  8B 7D 04		mov edi,[ebp+vertex_y]
 00000178  A1 00000000 E	mov eax,[_VESA_BPSL]
 0000017D  F7 E7		mul edi
 0000017F  03 05 00000098 R	add eax,[Where]
 00000185  A3 000000A8 R	mov [ScanLine],eax

				;mov edi,[ebp+vertex_y]
				;mov edx,edi
				;sal edi,8
				;sal edx,10
				;add edi,[Where]
				;add edi,edx
				;mov [ScanLine],edi

 0000018A			OuterLoop:
				;Inner Loop Start Here
 0000018A  A1 00000084 R	mov eax,[Left_X]
 0000018F  8B 2D 0000008C R	mov ebp,[Right_X]
 00000195  C1 F8 10		sar eax,16
 00000198  8B 3D 000000A8 R	mov edi,[ScanLine]
 0000019E  C1 FD 10		sar ebp,16
 000001A1  2B E8		sub ebp,eax
 000001A3  0F 8E 000001AD	jle UpdateValues
 000001A9  D9 05 000000B4 R	FLD dword ptr [Sixteen]
 000001AF  89 2D 00000060 R	mov [XWidth],ebp
 000001B5  DB 05 00000060 R	FILD dword ptr [XWidth]
 000001BB  DE F9		FDIV                ;ST(6) - 1.0/Width
 000001BD  D9 05 00000020 R	FLD dword ptr [Left_Z]   ;ST(5)
 000001C3  D9 05 00000010 R	FLD dword ptr [Left_U]   ;ST(4)
 000001C9  D9 05 00000018 R	FLD dword ptr [Left_V]   ;ST(3)
 000001CF  D9 05 00000028 R	FLD dword ptr [Right_Z]  ;ST(2)
 000001D5  D9 05 00000030 R	FLD dword ptr [Right_U]  ;ST(1)
 000001DB  D9 05 00000038 R	FLD dword ptr [Right_V]  ;ST(0)
 000001E1  D8 E3		FSUB ST(0),ST(3) ;ST(1) = Delta V
 000001E3  D9 C9		FXCH ST(1)
 000001E5  D8 E4		FSUB ST(0),ST(4) ;ST(2) = Delta U
 000001E7  D9 CA		FXCH ST(2)
 000001E9  D8 E5		FSUB ST(0),ST(5) ;ST(0) = Delta Z
 000001EB  D8 CE		FMUL ST(0),ST(6)
 000001ED  D9 CA		FXCH ST(2)
 000001EF  D8 CE		FMUL ST(0),ST(6)
 000001F1  D9 C9		FXCH ST(1)
 000001F3  D8 CE		FMUL ST(0),ST(6)
 000001F5  DD C6		FFREE ST(6)
 000001F7  8D 3C 87		lea edi,[edi+eax*4]
 000001FA  D9 05 000000B0 R	FLD One
 00000200  D8 F6		FDIV ST(0),ST(6)
 00000202  8A 0F		mov cl,[Edi]
 00000204  D8 0D 000000B8 R	FMUL dword ptr [SixtyFive]
 0000020A  D9 C0		FLD ST(0)
 0000020C  D8 CE		FMUL ST(0),ST(6)
 0000020E  DB 1D 00000048 R	FISTP dword ptr [u0]
 00000214  D8 CC		FMUL ST(0),ST(4)
 00000216  DB 1D 0000004C R	FISTP dword ptr [v0]

				;Left Z   ST(5)
				;Left U   ST(4)
				;Left V   ST(3)
				;Delta Z  ST(2)
				;Delta U  ST(1)
				;Delta V  ST(0)

 0000021C  D9 CB		FXCH ST(3)  ;ST(0) = V    ST(3) = Delta V
 0000021E  D8 C3		FADD ST(0),ST(3)
 00000220  D9 C9		FXCH ST(1)  ;ST(0) = Delta U    ST(1) = V
 00000222  D9 CC		FXCH ST(4)  ;ST(0) = U    ST(4) = Delta U
 00000224  D8 C4		FADD ST(0),ST(4)
 00000226  D9 CA		FXCH ST(2)  ;ST(0) = Delta Z    ST(2) = U
 00000228  D9 CD		FXCH ST(5)  ;ST(0) = Z    ST(5) = Delta Z
 0000022A  D8 C5		FADD ST(0),ST(5)

				;Delta Z  ST(5)
				;Delta U  ST(4)
				;Delta V  ST(3)
				;Left U   ST(2)
				;Left V   ST(1)
				;Left Z   ST(0)
 0000022C  BB 00000000		mov ebx,0
 00000231  8B 0D 00000048 R	mov ecx,[u0]
 00000237  8B 15 0000004C R	mov edx,[v0]
 0000023D  8A DD		mov   bl, ch
 0000023F  8A FE		mov   bh, dh
 00000241  8B 0D 00000094 R	mov ecx,[BitMap]

 00000247  D9 05 000000B0 R	FLD dword ptr [One]
 0000024D  D8 F1		FDIV ST(0),ST(1)
 0000024F  8A 0C 99		mov cl,[ecx+ebx*4]

 00000252  D8 0D 000000B8 R	FMUL dword ptr [SixtyFive]
 00000258  D9 C0		FLD ST(0)
 0000025A  D8 CC		FMUL ST(0),ST(4)
 0000025C  DB 1D 00000050 R	FISTP dword ptr [u1]
 00000262  D8 CA		FMUL ST(0),ST(2)
 00000264  DB 1D 00000054 R	FISTP dword ptr [v1]


 0000026A			InnerOuterLoop:

				;Delta Z  ST(5)
				;Delta U  ST(4)
				;Delta V  ST(3)
				;Left U   ST(2)
				;Left V   ST(1)
				;Left Z   ST(0)

 0000026A  D8 C5		FADD ST(0),ST(5)
 0000026C  D9 C9		FXCH ST(1)
 0000026E  D8 C3		FADD ST(0),ST(3)
 00000270  D9 CA		FXCH ST(2)
 00000272  D8 C4		FADD ST(0),ST(4)
 00000274  D9 CA		FXCH ST(2)
 00000276  D9 C9		FXCH ST(1)
 00000278  D9 05 000000B0 R	FLD dword ptr [One]
 0000027E  D8 F1		FDIV ST(0),ST(1)
 00000280  8B 35 00000050 R	mov esi,[u1]
 00000286  8B 15 00000054 R	mov edx,[v1]
 0000028C  2B 35 00000048 R	sub esi,[u0]
 00000292  2B 15 0000004C R	sub edx,[v0]
 00000298  C1 FE 04		sar esi,4
 0000029B  A1 00000060 R	mov eax,[Xwidth]
 000002A0  C1 FA 04		sar edx,4
 000002A3  8B E8		mov ebp,eax
 000002A5  83 E8 10		sub eax,16
 000002A8  83 FD 10		cmp ebp,16
 000002AB  7E 05		jle @@NoOver16
 000002AD  BD 00000010		mov ebp,16
 000002B2			@@NoOver16:
 000002B2  A3 00000060 R	mov [Xwidth],eax

				comment &

				mov [dv],edx
				mov [du],esi
				mov ebx,0
				mov esi,[BitMap]
				mov ecx,[u0]
				mov edx,[v0]
				;sar ecx,8
				;sar edx,8
				mov   bl, ch
				mov   bh, dh

				 @@InnerLoop:
				    add   edx, [dv]                 ; update v
				    add   ecx, [du]                 ; update u
					shr	  ebx, 4
					she	  ebx, 2
				    mov   eax, [esi+ebx*4]          ; get pixel from aligned texture map
				    mov   bl, ch
				    mov   [edi], eax                ; plot pixel
				    mov   bh, dh
					shr	  bh, 2
				    add   edi,4
				    dec   ebp
				    jnz   @@InnerLoop

				    DELTA U - ESI
				    DELTA V - EDX
					  U - [u0]
					  V - [v0]
				    Texture - [Bitmap]
				    Counter - EBP
				    VPage   - EDI

				&

				comment &

				Registers| 31 - 24 | 23 - 16 | 15 - 8  |  7 - 0  |
				--------------------------------------------------
				EAX      | frac DU |000000000| int DV  | frac DV |
				--------------------------------------------------
				EBX      | frac U  |000000000| int V   | frac V  |
				--------------------------------------------------
				ECX      |         |         |         | int U   |
				--------------------------------------------------
				EDX      |         |	     |         | int DU  |
				--------------------------------------------------
				ESI      | Counter				 |
				--------------------------------------------------
				EDI 	 | Textuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuure |
				--------------------------------------------------
				EBP      | Holds Pixel                           |
				--------------------------------------------------
				&
				; Create EAX
 000002B7  8B C6		mov eax,esi
 000002B9  C1 E0 18		shl eax,24
 000002BC  66| 8B C2		mov ax,dx
				; Create EBX
 000002BF  8B 1D 00000048 R	mov ebx,[u0]
 000002C5  C1 E3 18		shl ebx,24
 000002C8  8B 0D 0000004C R	mov ecx,[v0]
 000002CE  66| 8B D9		mov bx,cx
				; Create ECX
 000002D1  8B 0D 00000048 R	mov ecx,[u0]
 000002D7  C1 E9 08		shr ecx,8
				; Create EDX
 000002DA  8B D6		mov edx,esi
 000002DC  C1 EA 08		shr edx,8
				; Create ESI
 000002DF  8B F5		mov esi,ebp
 000002E1  C1 E6 02		shl esi,2
 000002E4  03 FE		add edi,esi
 000002E6  83 F6 FF		xor esi,-1
 000002E9  46			inc esi

				; Create EDI

 000002EA  81 E1 0000FFFF	and ecx,0ffffh

 000002F0  8A EF		mov ch,bh
				;xor ecx, ecx
 000002F2  8B 2C 8D			db 08Bh,02Ch,08Dh ; |
 000002F5 00000000			Texture1 dd ?      ; | <-- mov ebp,[TEXTURE+ecx*4]

 000002F9			@@InnerLoop:
				;	add ebx,eax
				;	db 08Bh,02Ch,08Dh ; |
				;	Texture dd ?      ; | <-- mov ebp,[TEXTURE+ecx*4]
				;	adc cl,dl
				;	mov [edi+esi],ebp
				;	mov ch,bh
				;	add esi,4

 000002F9  03 D8			add ebx,eax
 000002FB  89 2C 3E			mov [edi+esi],ebp
				;xor ecx, ecx
 000002FE  8B 2C 8D			db 08Bh,02Ch,08Dh ; |
 00000301 00000000			Texture dd ?      ; | <-- mov ebp,[TEXTURE+ecx*4]
 00000305  8A EF			mov ch,bh
 00000307  12 CA			adc cl,dl
 00000309  83 C6 04			add esi,4
 0000030C  75 EB			jnz @@InnerLoop


 0000030E  A1 00000050 R	mov eax,[u1]
 00000313  8B 0D 00000054 R	mov ecx,[v1]
 00000319  A3 00000048 R	mov [u0],eax
 0000031E  89 0D 0000004C R	mov [v0],ecx

 00000324  D8 0D 000000B8 R	FMUL dword ptr [SixtyFive]
 0000032A  A1 00000060 R	mov eax,[XWidth]
 0000032F  D9 C0		FLD ST(0)
 00000331  D8 CC		FMUL ST(0),ST(4)
 00000333  DB 1D 00000050 R	FISTP dword ptr [u1]
 00000339  D8 CA		FMUL ST(0),ST(2)
 0000033B  DB 1D 00000054 R	FISTP dword ptr [v1]

 00000341  83 F8 00		cmp eax,0
 00000344  0F 8F FFFFFF20	jg InnerOuterLoop
 0000034A  DD C0		FFREE ST(0)
 0000034C  DD C1		FFREE ST(1)
 0000034E  DD C2		FFREE ST(2)
 00000350  DD C3		FFREE ST(3)
 00000352  DD C4		FFREE ST(4)
 00000354  DD C5		FFREE ST(5)

				;Inner Loop End Here

 00000356			UpdateValues:
 00000356  A1 000000A8 R	mov eax,[ScanLine]
 0000035B  8B 1D 00000008 R	mov ebx,[Left_Section_Height]
 00000361  03 05 00000000 E	add eax,[_VESA_BPSL]
 00000367  4B			dec ebx
 00000368  A3 000000A8 R	mov [ScanLine],eax
 0000036D  89 1D 00000008 R	mov [Left_Section_Height],ebx
 00000373  7F 23		jg @@Update_Left_UVXZ
 00000375  8B 1D 00000000 R	mov ebx,[Left_Section]
 0000037B  4B			dec ebx
 0000037C  0F 8E 000000E0	jle TextureEnd
 00000382  89 1D 00000000 R	mov [Left_Section],ebx
 00000388  E8 000000DC		call CalcLeftSection
 0000038D  83 FB 00		cmp ebx,0
 00000390  0F 8E 000000CC	jle TextureEnd
 00000396  EB 4C		jmp RightSectionCheck
 00000398			@@Update_Left_UVXZ:
 00000398  D9 05 00000010 R	FLD dword ptr [Left_U]
 0000039E  D9 05 00000018 R	FLD dword ptr [Left_V]
 000003A4  D9 C9		FXCH ST(1)
 000003A6  D8 05 00000014 R	FADD dword ptr [Delta_Left_U]
 000003AC  D9 C9		FXCH ST(1)
 000003AE  D8 05 0000001C R	FADD [Delta_Left_V]
 000003B4  D9 C9		FXCH ST(1)
 000003B6  D9 1D 00000010 R	FSTP dword ptr [Left_U]
 000003BC  D9 1D 00000018 R	FSTP dword ptr [Left_V]

 000003C2  D9 05 00000020 R	FLD dword ptr [Left_Z]
 000003C8  A1 00000084 R	mov eax,[Left_X]
 000003CD  D8 05 00000024 R	FADD dword ptr [Delta_Left_Z]
 000003D3  03 05 00000088 R	add eax,[Delta_Left_X]
 000003D9  D9 1D 00000020 R	FSTP dword ptr [Left_Z]
 000003DF  A3 00000084 R	mov [Left_X],eax

 000003E4			RightSectionCheck:
 000003E4  8B 1D 0000000C R	mov ebx,[Right_Section_Height]
 000003EA  4B			dec ebx
 000003EB  89 1D 0000000C R	mov [Right_Section_Height],ebx
 000003F1  7F 1E		jg @@Update_Right_UVXZ
 000003F3  8B 1D 00000004 R	mov ebx,[Right_Section]
 000003F9  4B			dec ebx
 000003FA  7E 66		jle TextureEnd
 000003FC  89 1D 00000004 R	mov [Right_Section],ebx
 00000402  E8 000000FB		call CalcRightSection
 00000407  83 FB 00		cmp ebx,0
 0000040A  7E 56		jle TextureEnd
 0000040C  E9 FFFFFD79		jmp OuterLoop

 00000411			@@Update_Right_UVXZ:
 00000411  D9 05 00000030 R	FLD dword ptr [Right_U]
 00000417  D9 05 00000038 R	FLD dword ptr [Right_V]
 0000041D  D9 C9		FXCH ST(1)
 0000041F  D8 05 00000034 R	FADD dword ptr [Delta_Right_U]
 00000425  D9 C9		FXCH ST(1)
 00000427  D8 05 0000003C R	FADD [Delta_Right_V]
 0000042D  D9 C9		FXCH ST(1)
 0000042F  D9 1D 00000030 R	FSTP dword ptr [Right_U]
 00000435  D9 1D 00000038 R	FSTP dword ptr [Right_V]

 0000043B  D9 05 00000028 R	FLD dword ptr [Right_Z]
 00000441  A1 0000008C R	mov eax,[Right_X]
 00000446  D8 05 0000002C R	FADD dword ptr [Delta_Right_Z]
 0000044C  03 05 00000090 R	add eax,[Delta_Right_X]
 00000452  D9 1D 00000028 R	FSTP dword ptr [Right_Z]
 00000458  A3 0000008C R	mov [Right_X],eax

 0000045D  E9 FFFFFD28		jmp OuterLoop

 00000462			TextureEnd:
 00000462  8B 2D 000000AC R	mov ebp,[Tebp]
 00000468  C3			ret

 00000469			CalcLeftSection proc near

 00000469  A1 00000000 R	mov eax,[Left_Section]
 0000046E  8B 0C 85		mov ecx,[Left_Array+eax*4]
	   0000006C R
 00000475  83 E8 01		sub eax,1
 00000478  8B 34 85		mov esi,[Left_Array+eax*4]
	   0000006C R
 0000047F  8B 5E 04		mov ebx,[esi+Vertex_Y]
 00000482  2B 59 04		sub ebx,[ecx+Vertex_Y]
 00000485  74 74		jz @@CLSend
 00000487  89 1D 00000064 R	mov [Height],ebx
 0000048D  8B 11		mov edx,[ecx+Vertex_X]
 0000048F  DB 05 00000064 R	FILD dword ptr [Height]
 00000495  C1 E2 10		sal edx,16
 00000498  8B 06		mov eax,[esi+Vertex_X]
 0000049A  2B 01		sub eax,[ecx+Vertex_X]
 0000049C  D9 05 000000B0 R	FLD dword ptr [One]
 000004A2  C1 E0 10		sal eax,16
 000004A5  89 15 00000084 R	mov [left_x],edx
 000004AB  8B D0		mov edx,eax
 000004AD  DE F1		FDIVR
 000004AF  C1 FA 1F		sar edx,31
 000004B2  F7 FB		idiv ebx
 000004B4  D9 46 08		FLD dword ptr [esi+Vertex_Z]
 000004B7  A3 00000088 R	mov [Delta_Left_X],eax
 000004BC  D9 41 08		FLD dword ptr [ecx+Vertex_Z]
 000004BF  D9 15 00000020 R	FST [Left_Z]
 000004C5  DE E9		FSUB
 000004C7  D8 C9		FMUL ST,ST(1)
 000004C9  D9 1D 00000024 R	FSTP dword ptr [Delta_Left_Z]

 000004CF  D9 46 0C		FLD dword ptr [esi+Vertex_U]
 000004D2  D9 41 0C		FLD dword ptr [ecx+Vertex_U]
 000004D5  D9 15 00000010 R	FST [Left_U]
 000004DB  DE E9		FSUB
 000004DD  D8 C9		FMUL ST,ST(1)
 000004DF  D9 1D 00000014 R	FSTP dword ptr [Delta_Left_U]

 000004E5  D9 46 10		FLD dword ptr [esi+Vertex_V]
 000004E8  D9 41 10		FLD dword ptr [ecx+Vertex_V]
 000004EB  D9 15 00000018 R	FST [Left_V]
 000004F1  DE E9		FSUB
 000004F3  DE C9		FMUL
 000004F5  D9 1D 0000001C R	FSTP dword ptr [Delta_Left_V]
 000004FB			@@CLSend:
 000004FB  89 1D 00000008 R	mov [Left_Section_Height],ebx
 00000501  C3			  ret
 00000502			CalcLeftSection endp



 00000502			CalcRightSection proc near

 00000502  A1 00000004 R	mov eax,[Right_Section]
 00000507  8B 0C 85		mov ecx,[Right_Array+eax*4]
	   00000078 R
 0000050E  83 E8 01		sub eax,1
 00000511  8B 34 85		mov esi,[Right_Array+eax*4]
	   00000078 R
 00000518  8B 5E 04		mov ebx,[esi+Vertex_Y]
 0000051B  2B 59 04		sub ebx,[ecx+Vertex_Y]
 0000051E  74 74		jz @@CRSend
 00000520  89 1D 00000064 R	mov [Height],ebx
 00000526  8B 11		mov edx,[ecx+Vertex_X]
 00000528  DB 05 00000064 R	FILD dword ptr [Height]
 0000052E  C1 E2 10		sal edx,16
 00000531  8B 06		mov eax,[esi+Vertex_X]
 00000533  2B 01		sub eax,[ecx+Vertex_X]
 00000535  D9 05 000000B0 R	FLD dword ptr [One]
 0000053B  C1 E0 10		sal eax,16
 0000053E  89 15 0000008C R	mov [Right_X],edx
 00000544  8B D0		mov edx,eax
 00000546  DE F1		FDIVR
 00000548  C1 FA 1F		sar edx,31
 0000054B  F7 FB		idiv ebx
 0000054D  D9 46 08		FLD dword ptr [esi+Vertex_Z]
 00000550  A3 00000090 R	mov [Delta_Right_X],eax
 00000555  D9 41 08		FLD dword ptr [ecx+Vertex_Z]
 00000558  D9 15 00000028 R	FST [Right_Z]
 0000055E  DE E9		FSUB
 00000560  D8 C9		FMUL ST,ST(1)
 00000562  D9 1D 0000002C R	FSTP dword ptr [Delta_Right_Z]

 00000568  D9 46 0C		FLD dword ptr [esi+Vertex_U]
 0000056B  D9 41 0C		FLD dword ptr [ecx+Vertex_U]
 0000056E  D9 15 00000030 R	FST [Right_U]
 00000574  DE E9		FSUB
 00000576  D8 C9		FMUL ST,ST(1)
 00000578  D9 1D 00000034 R	FSTP dword ptr [Delta_Right_U]

 0000057E  D9 46 10		FLD dword ptr [esi+Vertex_V]
 00000581  D9 41 10		FLD dword ptr [ecx+Vertex_V]
 00000584  D9 15 00000038 R	FST [Right_V]
 0000058A  DE E9		FSUB
 0000058C  DE C9		FMUL
 0000058E  D9 1D 0000003C R	FSTP dword ptr [Delta_Right_V]
 00000594			@@CRSend:
 00000594  89 1D 0000000C R	mov [Right_Section_Height],ebx
 0000059A  C3			  ret
 0000059B			CalcRightSection endp

 0000059B = 0000059B		CodeSize	equ	$ - CodeStart

 059B				_TEXT	ENDS

				END
Microsoft (R) Macro Assembler Version 10.00.30319.01	    07/08/11 23:14:43
C:\Projects\REVIVAL\FDS\FILLERS\BITRUE.ASM		     Symbols 2 - 1




Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

_DATA  . . . . . . . . . . . . .	32 Bit	 00C4	  DWord	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 059B	  Byte	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CalcLeftSection  . . . . . . . .	P Near	 0469	  _TEXT	Length= 0099 Public
  @@CLSend . . . . . . . . . . .	L Near	 04FB	  _TEXT	
CalcRightSection . . . . . . . .	P Near	 0502	  _TEXT	Length= 0099 Public
  @@CRSend . . . . . . . . . . .	L Near	 0594	  _TEXT	


Symbols:

                N a m e                 Type     Value    Attr

@@InnerLoop  . . . . . . . . . .	L Near	 02F9	  _TEXT	
@@NoOver16 . . . . . . . . . . .	L Near	 02B2	  _TEXT	
@@Update_Left_UVXZ . . . . . . .	L Near	 0398	  _TEXT	
@@Update_Right_UVXZ  . . . . . .	L Near	 0411	  _TEXT	
@@sort1  . . . . . . . . . . . .	L Near	 0035	  _TEXT	
@@sort2  . . . . . . . . . . . .	L Near	 003F	  _TEXT	
@@sort3  . . . . . . . . . . . .	L Near	 0049	  _TEXT	
BitMap . . . . . . . . . . . . .	DWord	 0094	  _DATA	
Bottom . . . . . . . . . . . . .	DWord	 00A4	  _DATA	
CodeSize . . . . . . . . . . . .	Number	 059Bh	 
CodeStart  . . . . . . . . . . .	Number	 0000h	 
Delta_Left_X . . . . . . . . . .	DWord	 0088	  _DATA	
Delta_Right_X  . . . . . . . . .	DWord	 0090	  _DATA	
Delta_left_U . . . . . . . . . .	DWord	 0014	  _DATA	
Delta_left_V . . . . . . . . . .	DWord	 001C	  _DATA	
Delta_left_Z . . . . . . . . . .	DWord	 0024	  _DATA	
Delta_right_U  . . . . . . . . .	DWord	 0034	  _DATA	
Delta_right_V  . . . . . . . . .	DWord	 003C	  _DATA	
Delta_right_Z  . . . . . . . . .	DWord	 002C	  _DATA	
FLSNZ  . . . . . . . . . . . . .	L Near	 0175	  _TEXT	
Height . . . . . . . . . . . . .	DWord	 0064	  _DATA	
InnerOuterLoop . . . . . . . . .	L Near	 026A	  _TEXT	
Left_Array . . . . . . . . . . .	DWord	 006C	  _DATA	
Left_Section_Height  . . . . . .	DWord	 0008	  _DATA	
Left_Section . . . . . . . . . .	DWord	 0000	  _DATA	
Left_U . . . . . . . . . . . . .	DWord	 0010	  _DATA	
Left_V . . . . . . . . . . . . .	DWord	 0018	  _DATA	
Left_X . . . . . . . . . . . . .	DWord	 0084	  _DATA	
Left_Z . . . . . . . . . . . . .	DWord	 0020	  _DATA	
LongestOverZero  . . . . . . . .	L Near	 00FE	  _TEXT	
Longest  . . . . . . . . . . . .	DWord	 0068	  _DATA	
Middle . . . . . . . . . . . . .	DWord	 00A0	  _DATA	
One  . . . . . . . . . . . . . .	DWord	 00B0	  _DATA	
OuterLoop  . . . . . . . . . . .	L Near	 018A	  _TEXT	
RIght_Array  . . . . . . . . . .	DWord	 0078	  _DATA	
RevHeight  . . . . . . . . . . .	DWord	 0040	  _DATA	
RevWidth . . . . . . . . . . . .	DWord	 0044	  _DATA	
RightSectionCheck  . . . . . . .	L Near	 03E4	  _TEXT	
Right_Section_Height . . . . . .	DWord	 000C	  _DATA	
Right_Section  . . . . . . . . .	DWord	 0004	  _DATA	
Right_U  . . . . . . . . . . . .	DWord	 0030	  _DATA	
Right_V  . . . . . . . . . . . .	DWord	 0038	  _DATA	
Right_X  . . . . . . . . . . . .	DWord	 008C	  _DATA	
Right_Z  . . . . . . . . . . . .	DWord	 0028	  _DATA	
ScanLine . . . . . . . . . . . .	DWord	 00A8	  _DATA	
Sixteen  . . . . . . . . . . . .	DWord	 00B4	  _DATA	
Sixtyfive  . . . . . . . . . . .	DWord	 00B8	  _DATA	
TEBP . . . . . . . . . . . . . .	DWord	 00AC	  _DATA	
Texture1 . . . . . . . . . . . .	DWord	 02F5	  _TEXT	
TextureEnd . . . . . . . . . . .	L Near	 0462	  _TEXT	
Texture  . . . . . . . . . . . .	DWord	 0301	  _TEXT	
Top  . . . . . . . . . . . . . .	DWord	 009C	  _DATA	
UpdateValues . . . . . . . . . .	L Near	 0356	  _TEXT	
Vertex_U . . . . . . . . . . . .	Number	 000Ch	 
Vertex_V . . . . . . . . . . . .	Number	 0010h	 
Vertex_X . . . . . . . . . . . .	Number	 0000h	 
Vertex_Y . . . . . . . . . . . .	Number	 0004h	 
Vertex_Z . . . . . . . . . . . .	Number	 0008h	 
Where  . . . . . . . . . . . . .	DWord	 0098	  _DATA	
XWidth . . . . . . . . . . . . .	DWord	 0060	  _DATA	
_P_Texture_32_CodeStart  . . . .	DWord	 00C0	  _DATA	Public
_P_Texture_32_Size . . . . . . .	DWord	 00BC	  _DATA	Public
_P_Texture_32_ . . . . . . . . .	L Near	 0000	  _TEXT	Public
_VESA_BPSL . . . . . . . . . . .	DWord	 0000	  _DATA	External
du . . . . . . . . . . . . . . .	DWord	 0058	  _DATA	
dv . . . . . . . . . . . . . . .	DWord	 005C	  _DATA	
u0 . . . . . . . . . . . . . . .	DWord	 0048	  _DATA	
u1 . . . . . . . . . . . . . . .	DWord	 0050	  _DATA	
v0 . . . . . . . . . . . . . . .	DWord	 004C	  _DATA	
v1 . . . . . . . . . . . . . . .	DWord	 0054	  _DATA	

	   0 Warnings
	   0 Errors
