Microsoft (R) Macro Assembler Version 10.00.30319.01	    07/08/11 23:14:43
C:\Projects\REVIVAL\FDS\FILLERS\BILINEAR.ASM		     Page 1 - 1


				comment &
				FPU sections rewrite and full FPU takeover
				clock ticks are only estimate for pentium
				&


				.686
				.MMX
				.XMM
 00000000			_DATA   SEGMENT DWORD PUBLIC 'DATA'
				align 4
 00000000 00000000		Left_Section            dd      0
 00000004 00000000		Right_Section           dd      0
 00000008 00000000		Left_Section_Height     dd      0
 0000000C 00000000		Right_Section_Height    dd      0
 00000010 00000000		Left_X                  dd      0.0 ; float
 00000014 00000000		Delta_Left_X            dd      0.0 ; float
 00000018 00000000		Right_X                 dd      0.0 ; float
 0000001C 00000000		Delta_Right_X           dd      0.0 ; float
 00000020 00000000		Left_Z                  dd      0.0 ; float
 00000024 00000000		Delta_Left_Z            dd      0.0 ; float
 00000028 00000000		Left_U                  dd      0.0 ; float
 0000002C 00000000		Delta_Left_U            dd      0.0 ; float
 00000030 00000000		Left_V                  dd      0.0 ; float
 00000034 00000000		Delta_Left_V            dd      0.0 ; float
 00000038 00000000		dzdx                    dd      0.0 ; float
 0000003C 00000000		dudx                    dd      0.0 ; float
 00000040 00000000		dvdx                    dd      0.0 ; float
 00000044 00000000		RevHeight               dd      0.0 ; float
 00000048 00000000		RevWidth                dd      0.0 ; float
 0000004C 00000000		t                       dd      0.0 ; float
 00000050 00000000		Z                       dd      0.0 ; float
 00000054 00000000		U                       dd      0.0 ; float
 00000058 00000000		V                       dd      0.0 ; float
 0000005C 00000000		LX                      dd      0
 00000060 00000000		u0                      dd      0
 00000064 00000000		v0                      dd      0
 00000068 00000000		ut1                     dd      0
 0000006C 00000000		vt1                     dd      0
 00000070 00000000		du                      dd      0
 00000074 00000000		dv                      dd      0
 00000078 00000000		XWidth                  dd      0
 0000007C 00000000		Height                  dd      0
 00000080 00000000		Longest                 dd      0
 00000084  00000003 [		Left_Array              dd      3 dup(0)
	    00000000
	   ]
 00000090  00000003 [		Right_Array             dd      3 dup(0)
	    00000000
	   ]
 0000009C 00000000		Top                     dd      0
 000000A0 00000000		Middle                  dd      0
 000000A4 00000000		Bottom                  dd      0
 000000A8 00000000		ScanLine                dd      0
 000000AC 00000000		_DestinationPageD       dd      0
 000000B0 00000000		_CurrentTextureD        dd	0
 000000B4 00000000		_BTriangleD             dd	0
 000000B8 3F800000		One                     dd      1.0
 000000BC 41800000		Sixteen                 dd      16.0
 000000C0 43800000		TwoFiveSix              dd      256.0
 000000C4 47800000		SixtyFourK              dd      65536.0
 000000C8 00			bdu                     db      0
 000000C9 00000643		_P_Texture_8_Size	dd	ASM_FILE_END - _P_Texture_8_
				;EXTRN  _DestinationPageD    : DWORD
				;EXTRN  _CurrentTextureD     : DWORD
				;EXTRN  _BTriangleD          : DWORD
				EXTRN  _VESA_BPSL           : DWORD
				; element positions in struct
 = 00000000			Vertex_FX               equ     0
 = 00000004			Vertex_FY               equ     4
 = 00000008			Vertex_X                equ     8
 = 0000000C			Vertex_Y                equ     12
 = 00000010			Vertex_Z                equ     16
 = 00000014			Vertex_U                equ     20
 = 00000018			Vertex_V                equ     24
 = 0000001C			Element_Size            equ     Vertex_V + 4
 = ecx				v1                      equ     ecx
 = esi				v2                      equ     esi
 = edi				v3                      equ     edi
 = dword ptr			d                       equ     dword ptr
				align 1
 00CD				_DATA   ENDS

 00000000			_TEXT   SEGMENT USE32 DWORD PUBLIC 'CODE'
						ASSUME  cs:_TEXT, ds:_DATA

						PUBLIC  _P_Texture_8_Size

						PUBLIC  _P_Texture_8_
 00000000			_P_Texture_8_:
 00000000  55			push ebp

				;vtx in ebx , bitmap in eax , where in ecx

				;lea edi,[P_Texture_8_]


 00000001  89 0D 000000AC R	mov [_DestinationPageD],ecx  ;       dd      0
 00000007  A3 000000B0 R	mov [_CurrentTextureD],eax   ;       dd			 0
				;_BTriangleD             dd	0

				;mov [edi + Texture1 - P_Texture_8_],eax
				;mov [edi + Texture2 - P_Texture_8_],eax

				; update vertex pointers
				;mov ebx, [_BTriangleD]
 0000000C  8B CB		mov ecx,ebx
 0000000E  8B F3		mov esi,ebx
 00000010  8B FB		mov edi,ebx
 00000012  83 C6 1C		add esi,Element_Size
 00000015  83 C7 38		add edi,Element_Size * 2

				;ecx - vertex 1
				;esi - vertex 2
				;edi - vertex 3


				;cool                       st(0)   st(1)   st(2)   st(3)   st(4)   st(5)
 00000018  D9 41 04		FLD d [v1+Vertex_FY]      ; v1->fy                     ; 1 - 3
 0000001B  D9 46 04		FLD d [v2+Vertex_FY]      ; v2->fy  v1->fy             ; 2 - 4
 0000001E  D9 47 04		FLD d [v3+Vertex_FY]      ; v3->fy  v2->fy  v1->fy     ; 3 - 5
 00000021  D9 CA		fxch st(2)                ; v1->fy  v2->fy  v3->fy     ; 4
 00000023  DB 59 0C		FISTP d [v1 + Vertex_Y]   ; v2->fy  v3->fy             ; 5 - 10
 00000026  DB 5E 0C		FISTP d [v2 + Vertex_Y]   ; v3->fy                     ; 11 - 16
 00000029  DB 5F 0C		FISTP d [v3 + Vertex_Y]   ;                            ; 17 - 22


				; sort verticies - obsolete with frustrum clipper
 0000002C  8B 41 0C		mov eax,[ecx+Vertex_Y]
 0000002F  3B 46 0C		cmp eax,[esi+Vertex_Y]
 00000032  7E 02		jle @@sort1
 00000034  87 CE		xchg ecx,esi
 00000036			@@sort1:
 00000036  8B 41 0C		mov eax,[ecx+Vertex_Y]
 00000039  3B 47 0C		cmp eax,[edi+Vertex_Y]
 0000003C  7E 02		jle @@sort2
 0000003E  87 CF		xchg ecx,edi
 00000040			@@sort2:
 00000040  8B 46 0C		mov eax,[esi+Vertex_Y]
 00000043  3B 47 0C		cmp eax,[edi+Vertex_Y]
 00000046  7E 02		jle @@sort3
 00000048  87 F7		xchg esi,edi
 0000004A			@@sort3:

				; if the height is zero - bye bye
 0000004A  8B 5F 0C		mov ebx,[edi+Vertex_Y]
 0000004D  2B 59 0C		sub ebx,[ecx+Vertex_Y]
 00000050  0F 84 00000517	jz TextureEnd


 00000056  89 1D 0000007C R	mov [Height] , ebx


				; ouch ... FULL FPU TAKEOVER  = 21 + 23 + 22 = 66 cycles + ÷100 = ÷166
				; if you do all calculations before hand it takes 1 clock cycle less
				; but then , there is misused calculations if nothing is being drawed
				;cool                       st(0)   st(1)   st(2)   st(3)   st(4)   st(5)
 0000005C  D9 01		FLD d [v1+Vertex_FX];    1  v1->fx
 0000005E  D9 06		FLD d [v2+Vertex_FX];    2  v2->fx  v1->fx
 00000060  D9 07		FLD d [v3+Vertex_FX];    3  v3->fx  v2->fx  v1->fx
 00000062  D9 CA		fxch st(2)          ;    3  v1->fx  v2->fx  v3->fx
 00000064  DB 59 08		FISTP d [v1 + Vertex_X];    v2->fx  v3->fx         4 - 9
 00000067  DB 5E 08		FISTP d [v2 + Vertex_X];    v3->fx                 10 - 15
 0000006A  DB 5F 08		FISTP d [v3 + Vertex_X];                           16 - 21

 0000006D  DB 41 08		FILD d [v1+Vertex_X]; 1 - 3 v1->x
 00000070  DB 41 0C		FILD d [v1+Vertex_Y]; 2 - 5 v1->y   v1->x
 00000073  DB 46 08		FILD d [v2+Vertex_X]; 3 - 6 v2->x   v1->y   v1->x
 00000076  DB 46 0C		FILD d [v2+Vertex_Y]; 4 - 7 v2->y   v2->x   v1->y   v1->x
 00000079  DB 47 08		FILD d [v3+Vertex_X]; 5 - 8 v3->x   v2->y   v2->x   v1->y   v1->x
 0000007C  DB 47 0C		FILD d [v3+Vertex_Y]; 6 - 9 v3->y   v3->x   v2->y   v2->x   v1->y   v1->x
 0000007F  D9 CD		fxch st(5)          ; 10    v1->x   v3->x   v2->y   v2->x   v1->y   v3->y
 00000081  D9 19		FSTP d [v1 + Vertex_FX];    v3->x   v2->y   v2->x   v1->y   v3->y  11 - 13
 00000083  D9 1F		FSTP d [v3 + Vertex_FX];    v2->y   v2->x   v1->y   v3->y          14 - 15
 00000085  D9 5E 04		FSTP d [v2 + Vertex_FY];    v2->x   v1->y   v3->y                  16 - 17
 00000088  D9 1E		FSTP d [v2 + Vertex_FX];    v1->y   v3->y                          18 - 19
 0000008A  D9 59 04		FSTP d [v1 + Vertex_FY];    v3->y                                  20 - 21
 0000008D  D9 5F 04		FSTP d [v3 + Vertex_FY];                                           22 - 23



				; claculate longest scanline and stuff (for constant deltas)
				;   float t=(float)(v2->y - v1->y) / (float)height;
				;   float RevWidth = 16.0 / (t * (v3->x - v1->x) + (v1->x - v2->x));

				;   int longest = (int) (RevWidth * 65536.0);
				;   if(longest == 0)
				;   return;

				;cool(÷100 cycles) (saves atleast 39 cycles per scanline (prolly more))
				;                           st(0)                    st(1)    st(2)   st(3)
 00000090  DB 05 0000007C R	FILD  d [Height]          ; height = x
 00000096  D9 46 04		FLD   d [v2 + Vertex_FY]  ; v2->fy                   x
 00000099  D8 61 04		FSUB  d [v1 + Vertex_FY]  ; [v2->fy - v1->fy] = y    x
 0000009C  DE F1		FDIVR                     ; [y / x] = t
 0000009E  D9 07		FLD   d [v3 + Vertex_FX]  ; v3->fx                   t
 000000A0  D8 21		FSUB  d [v1 + Vertex_FX]  ; [v3->fx - v1->fx] = z    t
 000000A2  D9 05 000000BC R	FLD   d [Sixteen]         ; 16.0                     z        t
 000000A8  D9 CA		FXCH  ST(2)               ; t                        z        16.0
 000000AA  D9 01		FLD   d [v1 + Vertex_FX]  ; v1->fx                   t        z       16.0
 000000AC  D8 26		FSUB  d [v2 + Vertex_FX]  ; [v1->fx - v2->fx] = w    t        z       16.0
 000000AE  D9 C9		FXCH  ST(1)               ; t                        w        z       16.0
 000000B0  DC CA		FMUL  ST(2),ST(0)         ; t                        w        t*z      16.0
 000000B2  D9 1D 0000004C R	FSTP  d [t]               ; w                        t*z       16.0
 000000B8  DE C1		FADD                      ; t*z+w                    16.0
 000000BA  DB 15 0000007C R	FIST  d [Height]          ; t*z+w                    16.0
 000000C0  DE F9		FDIVP ST(1),ST(0)         ; 16.0/(t*z+w)
 000000C2  D9 1D 00000048 R	FSTP  d [RevWidth]        ; RevWidth

 000000C8  83 3D 0000007C R	cmp   d [Height] , 0      ; Width * 64k
	   00

				; now let's go handle some left/right sections procs (aim , then shoot)
				; (1 hour later...)
				; finished.

 000000CF  0F 84 00000498	jz TextureEnd
 000000D5  7D 7D		jge LongestOverZero


 000000D7  89 0D 0000009C R	mov [Top],ecx
 000000DD  8B E9		mov ebp,ecx
 000000DF  89 35 000000A0 R	mov [Middle],esi
 000000E5  89 3D 000000A4 R	mov [Bottom],edi
 000000EB  89 3D 00000090 R	mov [Right_Array],edi
 000000F1  89 35 00000094 R	mov [Right_Array+4],esi
 000000F7  89 0D 00000098 R	mov [Right_Array+8],ecx
 000000FD  C7 05 00000004 R	mov [Right_Section],2
	   00000002

 00000107  89 3D 00000084 R	mov [Left_Array],edi
 0000010D  89 0D 00000088 R	mov [Left_Array+4],ecx
 00000113  C7 05 00000000 R	mov [Left_Section],1
	   00000001

 0000011D  E8 0000044D		call CalcLeftSection
 00000122  83 FB 00		cmp ebx,0
 00000125  0F 8E 00000442	jle TextureEnd

 0000012B  E8 000004D2		call CalcRightSection
 00000130  83 FB 00		cmp ebx,0
 00000133  0F 8F 00000092	jg FLSNZ  ; First Right Section Is Not Zero
 00000139  A1 00000004 R	mov eax,[Right_Section]
 0000013E  48			dec eax
 0000013F  A3 00000004 R	mov [Right_Section],eax
 00000144  E8 000004B9		call CalcRightSection
 00000149  83 FB 00		cmp ebx,0
 0000014C  0F 8E 0000041B	jle TextureEnd
 00000152  EB 77		jmp FLSNZ

 00000154			LongestOverZero:
 00000154  89 0D 0000009C R	mov [Top],ecx
 0000015A  8B E9		mov ebp,ecx
 0000015C  89 35 000000A0 R	mov [Middle],esi
 00000162  89 3D 000000A4 R	mov [Bottom],edi
 00000168  89 3D 00000084 R	mov [Left_Array],edi
 0000016E  89 35 00000088 R	mov [Left_Array+4],esi
 00000174  89 0D 0000008C R	mov [Left_Array+8],ecx
 0000017A  C7 05 00000000 R	mov [Left_Section],2
	   00000002

 00000184  89 3D 00000090 R	mov [Right_Array],edi
 0000018A  89 0D 00000094 R	mov [Right_Array+4],ecx
 00000190  C7 05 00000004 R	mov [Right_Section],1
	   00000001

 0000019A  E8 00000463		call CalcRightSection
 0000019F  83 FB 00		cmp ebx,0
 000001A2  0F 8E 000003C5	jle TextureEnd

 000001A8  E8 000003C2		call CalcLeftSection
 000001AD  83 FB 00		cmp ebx,0
 000001B0  7F 19		jg FLSNZ  ; First Left Section Is Not Zero
 000001B2  A1 00000000 R	mov eax,[Left_Section]
 000001B7  48			dec eax
 000001B8  A3 00000000 R	mov [Left_Section],eax
 000001BD  E8 000003AD		call CalcLeftSection
 000001C2  83 FB 00		cmp ebx,0
 000001C5  0F 8E 000003A2	jle TextureEnd


 000001CB			FLSNZ:
				comment &
				calculation of constant deltas for z,u,v :

				  float dzdx = (t*(v3->z - v1->z)+(v1->z - v2->z)) * RevWidth;
				  float dudx = (t*(v3->u - v1->u)+(v1->u - v2->u)) * RevWidth;
				  float dvdx = (t*(v3->v - v1->v)+(v1->v - v2->v)) * RevWidth;
				&

 000001CB  8B 0D 0000009C R	mov v1,[Top]
 000001D1  8B 35 000000A0 R	mov v2,[Middle]
 000001D7  8B 3D 000000A4 R	mov v3,[Bottom]

				;                               st(0)   st(1)   st(2)   st(3)   st(4)   st(5)
 000001DD  D9 05 0000004C R	FLD   d [t];    1               t
 000001E3  D9 47 10		FLD   d [v3 + Vertex_Z];2       v3->z   t
 000001E6  D8 61 10		FSUB  d [v1 + Vertex_Z];3 - 5   d3z     t
 000001E9  D9 47 14		FLD   d [v3 + Vertex_U];4       v3->u   d3z     t
 000001EC  D8 61 14		FSUB  d [v1 + Vertex_U];5 - 7   d3u     d3z     t
 000001EF  D9 47 18		FLD   d [v3 + Vertex_V];6       v3->v   d3u     d3z     t
 000001F2  D8 61 18		FSUB  d [v1 + Vertex_V];7 - 9   d3v     d3u     d3z     t
 000001F5  D9 CB		FXCH  ST(3)            ;7       t       d3u     d3z     d3v
 000001F7  DC CA		FMUL  ST(2),ST(0)      ;8 - 10  t       d3u     d3z*t   d3v
 000001F9  DC C9		FMUL  ST(1),ST(0)      ;9 - 11  t       d3u*t   d3z*t   d3v
 000001FB  DE CB		FMULP ST(3),ST(0)      ;10 - 12 d3u*t   d3z*t   d3v*t

				;                               st(0)   st(1)   st(2)   st(3)   st(4)   st(5)
 000001FD  D9 41 10		FLD   d [v1 + Vertex_Z];11      v2->z   d3u*t   d3z*t   d3v*t
 00000200  D8 66 10		FSUB  d [v2 + Vertex_Z];12 - 14 d2z     d3u*t   d3z*t   d3v*t
 00000203  D9 41 14		FLD   d [v1 + Vertex_U];13      v2->u   d2z     d3u*t   d3z*t   d3v*t
 00000206  D8 66 14		FSUB  d [v2 + Vertex_U];14 - 16 d2u     d2z     d3u*t   d3z*t   d3v*t
 00000209  D9 41 18		FLD   d [v1 + Vertex_V];15      v2->v   d2u     d2z     d3u*t   d3z*t   d3v*t
 0000020C  D8 66 18		FSUB  d [v2 + Vertex_V];16 - 18 d2v     d2u     d2z     d3u*t   d3z*t   d3v*t
 0000020F  D9 CA		FXCH  ST(2)            ;16      d2z     d2u     d2v     d3u*t   d3z*t   d3v*t

				;                               st(0)   st(1)   st(2)   st(3)       st(4)
 00000211  DE C4		FADDP ST(4),ST(0)      ;17 - 19 d2u     d2v     d3u*t   d3z*t+d2z   d3v*t

				;                               st(0)   st(1)       st(2)       st(3)
 00000213  DE C2		FADDP ST(2),ST(0)      ;18 - 20 d2v     d3u*t+d2u   d3z*t+d2z   d3v*t

				;                               st(0)       st(1)       st(2)
 00000215  DE C3		FADDP ST(3),ST(0)      ;19 - 21 d3u*t+d2u   d3z*t+d2z   d3v*t+d2v

				;                               st(0)   st(1)   st(2)   st(3)
 00000217  D9 05 00000048 R	FLD   d [RevWidth]     ;20      RW      dtu     dtz     dtv
 0000021D  DC CA		FMUL  ST(2),ST(0)      ;21 - 23 RW      dtu     dtz*RW  dtv
 0000021F  DC C9		FMUL  ST(1),ST(0)      ;22 - 24 RW      dtu*RW  dtz*RW  dtv
 00000221  DE CB		FMULP ST(3),ST(0)      ;23 - 25 dtu*RW  dtz*RW  dtv*RW
 00000223  D9 C9		FXCH  ST(1)            ;23      dtz*RW  dtu*RW  dtv*RW
 00000225  D9 1D 00000038 R	FSTP  d [dzdx]         ;24 - 25 dtu*RW  dtv*RW
 0000022B  D9 1D 0000003C R	FSTP  d [dudx]         ;26 - 27 dtv*RW
 00000231  D9 1D 00000040 R	FSTP  d [dvdx]         ;28 - 29 dtv*RW
				; ouch

 00000237  8B 7D 0C		mov edi,[ebp+Vertex_Y]
 0000023A  A1 00000000 E	mov eax,[_VESA_BPSL]
 0000023F  F7 E7		mul edi
 00000241  03 05 000000AC R	add eax,[_DestinationPageD]
 00000247  A3 000000A8 R	mov [ScanLine],eax

 0000024C			OuterLoop:
				;Outer Loop Starts Here (Oh Yeah)
				;                           st(0)   st(1)   st(2)   st(3)
 0000024C  D9 05 00000010 R	FLD   d [Left_X] ; 1        Lx
 00000252  D9 05 00000018 R	FLD   d [Right_X]; 2        Rx      Lx
 00000258  D9 C9		FXCH             ; 2        Lx      dx
 0000025A  DB 1D 0000005C R	FISTP d [LX]     ; 3 - 8    dx
 00000260  DB 1D 00000078 R	FISTP d [XWidth] ; 9 - 14

 00000266  8B 2D 00000078 R	mov ebp,[XWidth]
 0000026C  A1 0000005C R	mov eax,[LX]
 00000271  2B E8		sub ebp,eax
 00000273  83 FD 00		cmp ebp,0
 00000276  89 2D 00000078 R	mov [XWidth],ebp
 0000027C  0F 8E 0000021B	jle UpdateValues

 00000282  8B 3D 000000A8 R	mov edi,[ScanLine]
 00000288  8B 1D 00000020 R	mov ebx,[Left_Z]
 0000028E  8B 0D 00000028 R	mov ecx,[Left_U]
 00000294  8B 15 00000030 R	mov edx,[Left_V]
 0000029A  89 1D 00000050 R	mov [Z],ebx
 000002A0  89 0D 00000054 R	mov [U],ecx
 000002A6  89 15 00000058 R	mov [V],edx

				; edi - screen pointer
 000002AC  8D 3C 38		lea edi,[edi+eax]

				;                           st(0)   st(1)   st(2)   st(3)
 000002AF  D9 05 000000B8 R	FLD  d [One] ; 1            1.0
 000002B5  D8 35 00000050 R	FDIV d [Z]   ; 2 - 40       1.0 / Z

				; (Screen) warm up cache (hhhhhhhhhhhnnnnnnnnn)
 000002BB  8A 0F		mov cl,[Edi]

				; preperations for first interpolated segment
				; fixup u/v                     st(0)       st(1)       st(2)
 000002BD  D8 0D 000000C0 R	FMUL d [TwoFiveSix] ; 1 - 3     Rz * 256
 000002C3  D9 05 00000054 R	FLD  d [U]          ; 2         U           Rz * 256
 000002C9  D9 05 00000058 R	FLD  d [V]          ; 3         V           U           Rz * 256
 000002CF  D8 CA		FMUL ST(0),ST(2)    ; 4 - 6     Rz*256*V    U           Rz * 256
 000002D1  D9 CA		FXCH ST(2)          ; 4         Rz * 256    U           Rz*256*V
 000002D3  DE C9		FMUL                ; 5 - 7     Rz*256*U    Rz*256*V
 000002D5  D9 C9		FXCH ST(1)          ; 5         Rz*256*V    Rz*256*U
 000002D7  DB 1D 00000064 R	FISTP dword ptr [v0]; 7 - 12    Rz*256*U
 000002DD  DB 1D 00000060 R	FISTP dword ptr [u0]; 13 - 18

				; update z/u/v
				;                                   st(0)       st(1)       st(2)
 000002E3  D9 05 00000050 R	FLD  d [Z]              ; 1         Z
 000002E9  D8 05 00000038 R	FADD d [dzdx]           ; 2 - 4     Z + dxdz
 000002EF  D9 05 00000054 R	FLD  d [U]              ; 3         U           Z + DZ
 000002F5  D8 05 0000003C R	FADD d [dudx]           ; 4 - 6     U + dxdu    Z + dxdz
 000002FB  D9 05 00000058 R	FLD  d [V]              ; 5         V           U + dxdu    Z + dxdz
 00000301  D8 05 00000040 R	FADD d [dvdx]           ; 6 - 8     V + dxdv    U + dxdu    Z + dxdz
 00000307  D9 CA		FXCH ST(2)              ; 6         Z + dxdz    U + dxdu    V + dxdv
 00000309  D9 1D 00000050 R	FSTP d [Z]              ; 7 - 8     U + dxdu    V + dxdv
 0000030F  D9 1D 00000054 R	FSTP d [U]              ; 9 - 10    V + dxdv
 00000315  D9 1D 00000058 R	FSTP d [V]              ; 11 - 12

				;                           st(0)   st(1)   st(2)   st(3)
 0000031B  D9 05 000000B8 R	FLD  d [One] ; 1            1.0
 00000321  D8 35 00000050 R	FDIV d [Z]   ; 2 - 40       1.0 / Z1

				; (Texture) warm up cache (hhhhhhhhhhhnnnnnnnnn)
 00000327  BB 00000000		mov ebx,0
 0000032C  8B 0D 00000060 R	mov ecx,[u0]
 00000332  8B 15 00000064 R	mov edx,[v0]
 00000338  8A DD		mov bl, ch
 0000033A  8A FE		mov bh, dh
 0000033C  8B 0D 000000B0 R	mov ecx,[_CurrentTextureD]
 00000342  8A 14 0B		mov dl,[ecx+ebx]


				; fixup u/v                     st(0)       st(1)       st(2)
 00000345  D8 0D 000000C0 R	FMUL d [TwoFiveSix]  ; 1 - 3    Rz * 256
 0000034B  D9 05 00000054 R	FLD  d [U]           ; 2        U1          Rz1 * 256
 00000351  D9 05 00000058 R	FLD  d [V]           ; 3        V1          U1          Rz1* 256
 00000357  D8 CA		FMUL ST(0),ST(2)     ; 4 - 6    Rz1*256*V1  U1          Rz1* 256
 00000359  D9 CA		FXCH ST(2)           ; 4        Rz1*256     U1          Rz1*256*V1
 0000035B  DE C9		FMUL                 ; 5 - 7    Rz1*256*U1  Rz1*256*V1
 0000035D  D9 C9		FXCH ST(1)           ; 5        Rz1*256*V1  Rz1*256*U1
 0000035F  DB 1D 0000006C R	FISTP dword ptr [vt1]; 7 - 12   Rz1*256*U1
 00000365  DB 1D 00000068 R	FISTP dword ptr [ut1]; 13 - 18


 0000036B			InnerOuterLoop:


				; update z/u/v
				;                                   st(0)       st(1)       st(2)
 0000036B  D9 05 00000050 R	FLD  d [Z]              ; 1         Z
 00000371  D8 05 00000038 R	FADD d [dzdx]           ; 2 - 4     Z + dxdz
 00000377  D9 05 00000054 R	FLD  d [U]              ; 3         U           Z + DZ
 0000037D  D8 05 0000003C R	FADD d [dudx]           ; 4 - 6     U + dxdu    Z + dxdz
 00000383  D9 05 00000058 R	FLD  d [V]              ; 5         V           U + dxdu    Z + dxdz
 00000389  D8 05 00000040 R	FADD d [dvdx]           ; 6 - 8     V + dxdv    U + dxdu    Z + dxdz
 0000038F  D9 CA		FXCH ST(2)              ; 6         Z + dxdz    U + dxdu    V + dxdv
 00000391  D9 1D 00000050 R	FSTP d [Z]              ; 7 - 8     U + dxdu    V + dxdv
 00000397  D9 1D 00000054 R	FSTP d [U]              ; 9 - 10    V + dxdv
 0000039D  D9 1D 00000058 R	FSTP d [V]              ; 11 - 12


				;                           st(0)   st(1)   st(2)   st(3)
 000003A3  D9 05 000000B8 R	FLD  d [One] ; 1            1.0
 000003A9  D8 35 00000050 R	FDIV d [Z]   ; 2 - 40       1.0 / Z

				; inner loop preperations
 000003AF  8B 35 00000068 R	mov esi,[ut1]
 000003B5  8B 15 0000006C R	mov edx,[vt1]
 000003BB  2B 35 00000060 R	sub esi,[u0]
 000003C1  2B 15 00000064 R	sub edx,[v0]
 000003C7  C1 FE 04		sar esi,4
 000003CA  A1 00000078 R	mov eax,[XWidth]
 000003CF  C1 FA 04		sar edx,4
 000003D2  8B E8		mov ebp,eax
 000003D4  83 E8 10		sub eax,16
 000003D7  83 FD 10		cmp ebp,16
 000003DA  7E 05		jle @@NoOver16
 000003DC  BD 00000010		mov ebp,16
 000003E1			@@NoOver16:
 000003E1  89 15 00000074 R	mov [dv],edx
 000003E7  89 35 00000070 R	mov [du],esi
 000003ED  A3 00000078 R	mov [XWidth],eax


				comment &

				Registers| 31 - 24 | 23 - 16 | 15 - 8  |  7 - 0  |
				--------------------------------------------------
				EAX      | frac DU |000000000| int DV  | frac DV |
				--------------------------------------------------
				EBX      | frac U  |000000000| int V   | frac V  |
				--------------------------------------------------
				ECX      |         |         |         | int U   |
				--------------------------------------------------
				bdu      |         |         |         | int DU  |
				--------------------------------------------------
				EDX      | texture                               |
				--------------------------------------------------
				ESI      | Counter                               |
				--------------------------------------------------
				EDI      | screen                                |
				--------------------------------------------------
				EBP      | Holds Pixel                           |
				--------------------------------------------------
				&
				;mov esi,[_CurrentTextureD]

				; Create EAX
 000003F2  8B C6		mov eax,esi
 000003F4  C1 E0 18		shl eax,24
 000003F7  66| 8B C2		mov ax,dx
				; Create EBX
 000003FA  8B 1D 00000060 R	mov ebx,[u0]
 00000400  C1 E3 18		shl ebx,24
 00000403  8B 0D 00000064 R	mov ecx,[v0]
 00000409  66| 8B D9		mov bx,cx
				; Create ECX
 0000040C  8B 0D 00000060 R	mov ecx,[u0]
 00000412  C1 E9 08		shr ecx,8
				; Create EDX
 00000415  8B D6		mov edx,esi
 00000417  88 35 000000C8 R	mov [bdu],dh
 0000041D  8B 15 000000B0 R	mov edx,[_CurrentTextureD]
				;shr edx,8
				; Create ESI
 00000423  8B F5		mov esi,ebp
				;shl esi,1
 00000425  03 FE		add edi,esi
 00000427  83 F6 FF		xor esi,-1
 0000042A  46			inc esi
 0000042B  81 E1 0000FFFF	and ecx,0ffffh
				; Create EDI
 00000431  8B E8		mov ebp,eax


 00000433  8A EF				mov ch,bh
				;		db 08ah,081h
				;		Texture1 dd 0
 00000435  8A 04 11				mov al,[edx+ecx]
 00000438  03 DD				add ebx,ebp
 0000043A  8A EF				mov ch,bh
 0000043C  12 0D 000000C8 R			adc cl,[bdu]

 00000442			@@InnerLoop:

 00000442  03 DD				add ebx,ebp
 00000444  88 04 3E				mov [edi+esi],al
				;		db 08ah,081h
				;		Texture2 dd 0
 00000447  8A 04 11				mov al,[edx+ecx]
 0000044A  8A EF				mov ch,bh
 0000044C  12 CA				adc cl,dl
 0000044E  83 C6 01				add esi,1
 00000451  75 EF				jnz @@InnerLoop




				comment &
				mov ebx,0
				mov ecx,[u0]
				mov edx,[v0]
				;sar ecx,8
				;sar edx,8
				mov   bl, ch
				mov   bh, dh


				 @@InnerLoop:
				    add   edx, [dv]                 ; update v  1 - 2
				    add   ecx, [du]                 ; update u  2 - 3
				    mov   ax, [esi+ebx*2]           ;           4
				    mov   bl, ch                    ;           5
				    mov   [edi], ax                 ;           6
				    mov   bh, dh                    ;           7
				    add   edi,2                     ;           7
				    dec   ebp                       ;           8
				    jnz   @@InnerLoop               ;           8
				&
 00000453  A1 00000068 R	mov eax,[ut1]
 00000458  8B 0D 0000006C R	mov ecx,[vt1]
 0000045E  A3 00000060 R	mov [u0],eax
 00000463  89 0D 00000064 R	mov [v0],ecx



 00000469  A1 00000078 R	mov eax,[XWidth]
				; fixup u/v                     st(0)       st(1)       st(2)
 0000046E  D8 0D 000000C0 R	FMUL d [TwoFiveSix]  ; 1 - 3    Rz * 256
 00000474  D9 05 00000054 R	FLD  d [U]           ; 2        U1          Rz1 * 256
 0000047A  D9 05 00000058 R	FLD  d [V]           ; 3        V1          U1          Rz1* 256
 00000480  D8 CA		FMUL ST(0),ST(2)     ; 4 - 6    Rz1*256*V1  U1          Rz1* 256
 00000482  D9 CA		FXCH ST(2)           ; 4        Rz1*256     U1          Rz1*256*V1
 00000484  DE C9		FMUL                 ; 5 - 7    Rz1*256*U1  Rz1*256*V1
 00000486  D9 C9		FXCH ST(1)           ; 5        Rz1*256*V1  Rz1*256*U1
 00000488  DB 1D 0000006C R	FISTP dword ptr [vt1]; 7 - 12   Rz1*256*U1
 0000048E  DB 1D 00000068 R	FISTP dword ptr [ut1]; 13 - 18

 00000494  83 F8 00		cmp eax,0
 00000497  0F 8F FFFFFECE	jg InnerOuterLoop

				;Inner Outer Loop End Here

 0000049D			UpdateValues:
 0000049D  A1 000000A8 R	mov eax,[ScanLine]
 000004A2  8B 1D 00000008 R	mov ebx,[Left_Section_Height]
 000004A8  03 05 00000000 E	add eax,[_VESA_BPSL]
 000004AE  4B			dec ebx
 000004AF  A3 000000A8 R	mov [ScanLine],eax
 000004B4  89 1D 00000008 R	mov [Left_Section_Height],ebx
 000004BA  7F 23		jg @@Update_Left_UVXZ
 000004BC  8B 1D 00000000 R	mov ebx,[Left_Section]
 000004C2  4B			dec ebx
 000004C3  0F 8E 000000A4	jle TextureEnd
 000004C9  89 1D 00000000 R	mov [Left_Section],ebx
 000004CF  E8 0000009B		call CalcLeftSection
 000004D4  83 FB 00		cmp ebx,0
 000004D7  0F 8E 00000090	jle TextureEnd
 000004DD  EB 4A		jmp RightSectionCheck
 000004DF			@@Update_Left_UVXZ:

				; update left edge deltas
				;                               st(0)   st(1)   st(2)   st(3)
 000004DF  D9 05 00000010 R	FLD  d [Left_X]      ; 1        LX
 000004E5  D8 05 00000014 R	FADD d [Delta_Left_X]; 2 - 4    LX1
 000004EB  D9 05 00000020 R	FLD  d [Left_Z]      ; 3        LZ      LX1
 000004F1  D8 05 00000024 R	FADD d [Delta_Left_Z]; 4 - 6    LZ1     LX1
 000004F7  D9 05 00000028 R	FLD  d [Left_U]      ; 5        LU      LZ1     LX1
 000004FD  D8 05 0000002C R	FADD d [Delta_Left_U]; 6 - 8    LU1     LZ1     LX1
 00000503  D9 05 00000030 R	FLD  d [Left_V]      ; 7        LV      LU1     LZ1     LX1
 00000509  D8 05 00000034 R	FADD d [Delta_Left_V]; 8 - 10   LV1     LU1     LZ1     LX1
 0000050F  D9 CB		FXCH ST(3)           ; 8        LX1     LU1     LZ1     LV1
 00000511  D9 1D 00000010 R	FSTP d [Left_X]      ; 9 - 10   LU1     LZ1     LV1
 00000517  D9 1D 00000028 R	FSTP d [Left_U]      ; 11 - 12  LZ1     LV1
 0000051D  D9 1D 00000020 R	FSTP d [Left_Z]      ; 13 - 14  LV1
 00000523  D9 1D 00000030 R	FSTP d [Left_V]      ; 15 - 16


 00000529			RightSectionCheck:
 00000529  8B 1D 0000000C R	mov ebx,[Right_Section_Height]
 0000052F  4B			dec ebx
 00000530  89 1D 0000000C R	mov [Right_Section_Height],ebx
 00000536  7F 1E		jg @@Update_Right_UVXZ
 00000538  8B 1D 00000004 R	mov ebx,[Right_Section]
 0000053E  4B			dec ebx
 0000053F  7E 2C		jle TextureEnd
 00000541  89 1D 00000004 R	mov [Right_Section],ebx
 00000547  E8 000000B6		call CalcRightSection
 0000054C  83 FB 00		cmp ebx,0
 0000054F  7E 1C		jle TextureEnd
 00000551  E9 FFFFFCF6		jmp OuterLoop

 00000556			@@Update_Right_UVXZ:

				; update right edge deltas
				;                               st(0)   st(1)   st(2)   st(3)
 00000556  D9 05 00000018 R	FLD  d [Right_X]      ; 1       RX
 0000055C  D8 05 0000001C R	FADD d [Delta_Right_X]; 2 - 4   RX1
 00000562  D9 1D 00000018 R	FSTP d [Right_X]      ; 5 - 6

 00000568  E9 FFFFFCDF		jmp OuterLoop

 0000056D			TextureEnd:
 0000056D  5D			pop ebp
 0000056E  C3			ret


 0000056F			CalcLeftSection proc near

 0000056F  A1 00000000 R	mov eax,[Left_Section]
 00000574  8B 0C 85		mov v1,[Left_Array+eax*4]
	   00000084 R
				;sub eax,1
 0000057B  8B 34 85		mov v2,[Left_Array+eax*4-4]
	   00000080 R
 00000582  8B 5E 0C		mov ebx,[v2+Vertex_Y]
 00000585  2B 59 0C		sub ebx,[v1+Vertex_Y]
 00000588  74 71		jz @@CLSend
 0000058A  89 1D 0000007C R	mov [Height],ebx
				;cool                    st(0)   st(1)   st(2)   st(3)   st(4)

 00000590  DB 05 0000007C R	FILD d [Height]; 1 - 3   hgt
 00000596  D9 05 000000B8 R	FLD  d [One];    2       1.0     hgt
 0000059C  D9 06		FLD  d [v2+Vertex_FX];3  v2->fx  1.0     hgt
 0000059E  D9 CA		FXCH ST(2); 3            hgt     1.0     v2->fx
 000005A0  DE F9		FDIV;    4 - 42          1.0/hgt v2->fx
 000005A2  D9 C9		FXCH ST(1); 4            v2->fx  1.0/hgt
 000005A4  D8 21		FSUB d [v1+Vertex_FX];5  dx      1.0/hgt
 000005A6  D9 46 10		FLD  d [v2+Vertex_Z]; 6  v2->z   dx      1.0/hgt
 000005A9  D8 61 10		FSUB d [v1+Vertex_Z]; 7  dz      dx      1.0/hgt
 000005AC  D9 46 14		FLD  d [v2+Vertex_U]; 8  v2->u   dz      dx      1.0/hgt
 000005AF  D8 61 14		FSUB d [v1+Vertex_U]; 9  du      dz      dx      1.0/hgt

 000005B2  8B 01		mov  eax,[v1+Vertex_FX] ;10
 000005B4  8B 51 10		mov  edx,[v1+Vertex_Z]  ;10
 000005B7  A3 00000010 R	mov  [Left_X],eax       ;11
 000005BC  89 15 00000020 R	mov  [Left_Z],edx       ;11
 000005C2  8B 41 14		mov  eax,[v1+Vertex_U]  ;12
 000005C5  8B 51 18		mov  edx,[v1+Vertex_V]  ;12
 000005C8  A3 00000028 R	mov  [Left_U],eax       ;13
 000005CD  89 15 00000030 R	mov  [Left_V],edx       ;13

				;cool                       st(0)   st(1)   st(2)   st(3)   st(4)
 000005D3  D9 46 18		FLD   d [v2+Vertex_V];14    v2->v   du      dz      dx      1.0/hgt
 000005D6  D8 61 18		FSUB  d [v1+Vertex_V];14    dv      du      dz      dx      1.0/hgt
 000005D9  D9 CC		FXCH  ST(4); 14             1.0/hgt du      dz      dx      dv
 000005DB  DC C9		FMUL  ST(1),st(0);1 - 3     1.0/hgt du/hgt  dz      dx      dv
 000005DD  DC CA		FMUL  ST(2),st(0);2 - 4     1.0/hgt du/hgt  dz/hgt  dx      dv
 000005DF  DC CB		FMUL  ST(3),st(0);3 - 5     1.0/hgt du/hgt  dz/hgt  dx/hgt  dv
 000005E1  DE CC		FMULP ST(4),st(0);4 - 6     du/hgt  dz/hgt  dx/hgt  dv/hgt
 000005E3  D9 1D 0000002C R	FSTP  d [Delta_Left_U];5-6  dz/hgt  dx/hgt  dv/hgt
 000005E9  D9 1D 00000024 R	FSTP  d [Delta_Left_Z];7-8  dx/hgt  dv/hgt
 000005EF  D9 1D 00000014 R	FSTP  d [Delta_Left_X];9-10 dv/hgt
 000005F5  D9 1D 00000034 R	FSTP  d [Delta_Left_V];10-11
 000005FB			@@CLSend:
 000005FB  89 1D 00000008 R	mov [Left_Section_Height],ebx
 00000601  C3			ret
 00000602			CalcLeftSection endp



 00000602			CalcRightSection proc near

 00000602  A1 00000004 R	mov eax,[Right_Section]
 00000607  8B 0C 85		mov v1,[Right_Array+eax*4]
	   00000090 R
				;sub eax,1
 0000060E  8B 34 85		mov v2,[Right_Array+eax*4-4]
	   0000008C R
 00000615  8B 5E 0C		mov ebx,[v2+Vertex_Y]
 00000618  2B 59 0C		sub ebx,[v1+Vertex_Y]
 0000061B  74 1F		jz @@CRSend
 0000061D  89 1D 0000007C R	mov [Height],ebx

				;cool                           st(0)   st(1)

 00000623  DB 05 0000007C R	FILD d [Height]; 1 - 3          hgt
 00000629  D9 06		FLD  d [v2+Vertex_FX];2         v2->fx  hgt
 0000062B  D8 21		FSUB d [v1+Vertex_FX];3 - 5     dx      hgt
 0000062D  8B 01		mov  eax,[v1+Vertex_FX];4
 0000062F  A3 00000018 R	mov  [Right_X],eax  ;5
 00000634  DE F1		FDIVR;    5 - 43                dx/hgt
 00000636  D9 1D 0000001C R	FSTP d [Delta_Right_X]

 0000063C			@@CRSend:
 0000063C  89 1D 0000000C R	mov [Right_Section_Height],ebx
 00000642  C3			ret
 00000643			CalcRightSection endp

 00000643 = 00000643		ASM_FILE_END	equ	$

 0643				_TEXT   ENDS

				END
Microsoft (R) Macro Assembler Version 10.00.30319.01	    07/08/11 23:14:43
C:\Projects\REVIVAL\FDS\FILLERS\BILINEAR.ASM		     Symbols 2 - 1




Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

_DATA  . . . . . . . . . . . . .	32 Bit	 00CD	  DWord	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 0643	  DWord	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CalcLeftSection  . . . . . . . .	P Near	 056F	  _TEXT	Length= 0093 Public
  @@CLSend . . . . . . . . . . .	L Near	 05FB	  _TEXT	
CalcRightSection . . . . . . . .	P Near	 0602	  _TEXT	Length= 0041 Public
  @@CRSend . . . . . . . . . . .	L Near	 063C	  _TEXT	


Symbols:

                N a m e                 Type     Value    Attr

@@InnerLoop  . . . . . . . . . .	L Near	 0442	  _TEXT	
@@NoOver16 . . . . . . . . . . .	L Near	 03E1	  _TEXT	
@@Update_Left_UVXZ . . . . . . .	L Near	 04DF	  _TEXT	
@@Update_Right_UVXZ  . . . . . .	L Near	 0556	  _TEXT	
@@sort1  . . . . . . . . . . . .	L Near	 0036	  _TEXT	
@@sort2  . . . . . . . . . . . .	L Near	 0040	  _TEXT	
@@sort3  . . . . . . . . . . . .	L Near	 004A	  _TEXT	
ASM_FILE_END . . . . . . . . . .	Number	 0643h	 
Bottom . . . . . . . . . . . . .	DWord	 00A4	  _DATA	
Delta_Left_U . . . . . . . . . .	DWord	 002C	  _DATA	
Delta_Left_V . . . . . . . . . .	DWord	 0034	  _DATA	
Delta_Left_X . . . . . . . . . .	DWord	 0014	  _DATA	
Delta_Left_Z . . . . . . . . . .	DWord	 0024	  _DATA	
Delta_Right_X  . . . . . . . . .	DWord	 001C	  _DATA	
Element_Size . . . . . . . . . .	Number	 001Ch	 
FLSNZ  . . . . . . . . . . . . .	L Near	 01CB	  _TEXT	
Height . . . . . . . . . . . . .	DWord	 007C	  _DATA	
InnerOuterLoop . . . . . . . . .	L Near	 036B	  _TEXT	
LX . . . . . . . . . . . . . . .	DWord	 005C	  _DATA	
Left_Array . . . . . . . . . . .	DWord	 0084	  _DATA	
Left_Section_Height  . . . . . .	DWord	 0008	  _DATA	
Left_Section . . . . . . . . . .	DWord	 0000	  _DATA	
Left_U . . . . . . . . . . . . .	DWord	 0028	  _DATA	
Left_V . . . . . . . . . . . . .	DWord	 0030	  _DATA	
Left_X . . . . . . . . . . . . .	DWord	 0010	  _DATA	
Left_Z . . . . . . . . . . . . .	DWord	 0020	  _DATA	
LongestOverZero  . . . . . . . .	L Near	 0154	  _TEXT	
Longest  . . . . . . . . . . . .	DWord	 0080	  _DATA	
Middle . . . . . . . . . . . . .	DWord	 00A0	  _DATA	
One  . . . . . . . . . . . . . .	DWord	 00B8	  _DATA	
OuterLoop  . . . . . . . . . . .	L Near	 024C	  _TEXT	
RevHeight  . . . . . . . . . . .	DWord	 0044	  _DATA	
RevWidth . . . . . . . . . . . .	DWord	 0048	  _DATA	
RightSectionCheck  . . . . . . .	L Near	 0529	  _TEXT	
Right_Array  . . . . . . . . . .	DWord	 0090	  _DATA	
Right_Section_Height . . . . . .	DWord	 000C	  _DATA	
Right_Section  . . . . . . . . .	DWord	 0004	  _DATA	
Right_X  . . . . . . . . . . . .	DWord	 0018	  _DATA	
ScanLine . . . . . . . . . . . .	DWord	 00A8	  _DATA	
Sixteen  . . . . . . . . . . . .	DWord	 00BC	  _DATA	
SixtyFourK . . . . . . . . . . .	DWord	 00C4	  _DATA	
TextureEnd . . . . . . . . . . .	L Near	 056D	  _TEXT	
Top  . . . . . . . . . . . . . .	DWord	 009C	  _DATA	
TwoFiveSix . . . . . . . . . . .	DWord	 00C0	  _DATA	
UpdateValues . . . . . . . . . .	L Near	 049D	  _TEXT	
U  . . . . . . . . . . . . . . .	DWord	 0054	  _DATA	
Vertex_FX  . . . . . . . . . . .	Number	 0000h	 
Vertex_FY  . . . . . . . . . . .	Number	 0004h	 
Vertex_U . . . . . . . . . . . .	Number	 0014h	 
Vertex_V . . . . . . . . . . . .	Number	 0018h	 
Vertex_X . . . . . . . . . . . .	Number	 0008h	 
Vertex_Y . . . . . . . . . . . .	Number	 000Ch	 
Vertex_Z . . . . . . . . . . . .	Number	 0010h	 
V  . . . . . . . . . . . . . . .	DWord	 0058	  _DATA	
XWidth . . . . . . . . . . . . .	DWord	 0078	  _DATA	
Z  . . . . . . . . . . . . . . .	DWord	 0050	  _DATA	
_BTriangleD  . . . . . . . . . .	DWord	 00B4	  _DATA	
_CurrentTextureD . . . . . . . .	DWord	 00B0	  _DATA	
_DestinationPageD  . . . . . . .	DWord	 00AC	  _DATA	
_P_Texture_8_Size  . . . . . . .	DWord	 00C9	  _DATA	Public
_P_Texture_8_  . . . . . . . . .	L Near	 0000	  _TEXT	Public
_VESA_BPSL . . . . . . . . . . .	DWord	 0000	  _DATA	External
bdu  . . . . . . . . . . . . . .	Byte	 00C8	  _DATA	
dudx . . . . . . . . . . . . . .	DWord	 003C	  _DATA	
du . . . . . . . . . . . . . . .	DWord	 0070	  _DATA	
dvdx . . . . . . . . . . . . . .	DWord	 0040	  _DATA	
dv . . . . . . . . . . . . . . .	DWord	 0074	  _DATA	
dzdx . . . . . . . . . . . . . .	DWord	 0038	  _DATA	
d  . . . . . . . . . . . . . . .	Text   	 dword ptr
t  . . . . . . . . . . . . . . .	DWord	 004C	  _DATA	
u0 . . . . . . . . . . . . . . .	DWord	 0060	  _DATA	
ut1  . . . . . . . . . . . . . .	DWord	 0068	  _DATA	
v0 . . . . . . . . . . . . . . .	DWord	 0064	  _DATA	
v1 . . . . . . . . . . . . . . .	Text   	 ecx
v2 . . . . . . . . . . . . . . .	Text   	 esi
v3 . . . . . . . . . . . . . . .	Text   	 edi
vt1  . . . . . . . . . . . . . .	DWord	 006C	  _DATA	

	   0 Warnings
	   0 Errors
