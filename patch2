diff --git a/DEMO/CITY.CPP b/DEMO/CITY.CPP
index 54b6a01..08062a9 100644
--- a/DEMO/CITY.CPP
+++ b/DEMO/CITY.CPP
@@ -1588,6 +1588,11 @@ void Initialize_City()
 		auto T = (TriMesh*)(Obj->Data);
 		auto flags = T->Flags;
 		T->Flags &= ~HTrack_Visible;
+
+		for (Face* F = T->Faces, *FE = T->Faces + T->FIndex; F != FE; ++F) {
+			F->Flags |= Face_Reflective;
+		}
+
 		EnvCam.ISource = T->IPos + T->BSphereCtr;
 		for (int i = 0; i != 6; ++i) {
 			FastWrite(VPage, 0, (PageSize + XRes * YRes * sizeof(word)) >> 2);
diff --git a/FDS/Base/Vector.h b/FDS/Base/Vector.h
index c3bb97d..f856708 100644
--- a/FDS/Base/Vector.h
+++ b/FDS/Base/Vector.h
@@ -7,100 +7,12 @@
 
 #pragma pack(push, 1)
 
-struct alignas(16) XMMVector
-{
-
-	using this_type = XMMVector;
-
-	inline XMMVector() : x(0.0f), y(0.0f), z(0.0f), w(0.0f) {}
-	//inline XMMVector(const __m128 &other) : v(other) {}
-	inline XMMVector(float _x, float _y, float _z) : x(_x), y(_y), z(_z), w(0.0f) {}
-
-	union // blah
-	{
-		__m128 v;
-		struct {
-			float x, y, z, w;
-		};
-	};
-
-	// Returns Vector length of Vector V.
-	inline __m128 InverseNorm()
-	{
-		return _mm_rsqrt_ps(_mm_dp_ps(v, v, 0x77));
-	}
-
-	inline float Length()
-	{
-		// (v dot v) * 1/sqrt(v dot v)
-		auto dp = _mm_dp_ps(v, v, 0x71);
-		return _mm_cvtss_f32(_mm_mul_ss(dp , _mm_rsqrt_ss(dp)));
-	}
-
-	inline void Normalize()
-	{
-		v = _mm_mul_ps(v, InverseNorm());
-	}
-
-	//this_type(this_type &&) = default;
-
-	inline this_type& operator+=(const this_type& rhs)
-	{
-		v = _mm_add_ps(v, rhs.v);
-		return *this;
-	}
-
-	inline friend this_type operator+(this_type lhs, const this_type& rhs)
-	{
-		lhs += rhs;
-		return lhs;
-	}
-
-	inline this_type& operator-=(const this_type& rhs)
-	{
-		v = _mm_sub_ps(v, rhs.v);
-		return *this;
-	}
-
-	inline friend this_type operator-(this_type lhs, const this_type& rhs)
-	{
-		lhs -= rhs;
-		return lhs;
-	}
-
-	inline this_type& operator*=(float rhs)
-	{
-		const __m128 scalar = _mm_set1_ps(rhs);
-		v = _mm_mul_ps(v, scalar);
-		return *this;		
-	}
-
-	inline friend this_type operator*(this_type lhs, float rhs)
-	{
-		lhs *= rhs;
-		return lhs;
-	}
-
-	inline this_type& operator*=(const this_type& rhs)
-	{
-		v = _mm_mul_ps(v, rhs.v);
-		return *this;
-	}
-
-	inline friend this_type operator*(this_type lhs, const this_type& rhs)
-	{
-		lhs *= rhs;
-		return lhs;
-	}
-
-};
-
 // [12 Bytes]
 struct Vector
 {
-	float x = 0.0f , y = 0.0f, z = 0.0f;
+	float x = 0.0f, y = 0.0f, z = 0.0f;
 
-	void Read(FILE * f) {
+	void Read(FILE* f) {
 		fread(&x, 1, sizeof(float), f);
 		fread(&y, 1, sizeof(float), f);
 		fread(&z, 1, sizeof(float), f);
@@ -108,7 +20,7 @@ struct Vector
 
 
 	Vector() = default;
-	Vector(float _x, float _y, float _z): x(_x), y(_y), z(_z){}
+	Vector(float _x, float _y, float _z) : x(_x), y(_y), z(_z) {}
 	//~Vector() {}
 
 	void print() {
@@ -119,8 +31,8 @@ struct Vector
 		return 0.0f == x && x == y && y == z;
 	}
 
-/////////////////////////////////////////////////////////
-	inline static void add(Vector &u, Vector &v, Vector &w)
+	/////////////////////////////////////////////////////////
+	inline static void add(Vector& u, Vector& v, Vector& w)
 	{
 		w.x = u.x + v.x;
 		w.y = u.y + v.y;
@@ -128,19 +40,19 @@ struct Vector
 	}
 
 	// this = u + v;
-	inline void add(Vector &u, Vector &v)
+	inline void add(Vector& u, Vector& v)
 	{
 		x = u.x + v.x;
 		y = u.y + v.y;
 		z = u.z + v.z;
 	}
 
-	inline Vector operator + (const Vector &u) const
+	inline Vector operator + (const Vector& u) const
 	{
 		return Vector(x + u.x, y + u.y, z + u.z);
 	}
 
-	inline Vector &operator += (const Vector &u)
+	inline Vector& operator += (const Vector& u)
 	{
 		x += u.x;
 		y += u.y;
@@ -148,8 +60,8 @@ struct Vector
 		return *this;
 	}
 
-/////////////////////////////////////////////////////////
-	inline static void sub(Vector &u, Vector &v, Vector &w)
+	/////////////////////////////////////////////////////////
+	inline static void sub(Vector& u, Vector& v, Vector& w)
 	{
 		w.x = u.x - v.x;
 		w.y = u.y - v.y;
@@ -157,19 +69,19 @@ struct Vector
 	}
 
 	// this = u - v;
-	inline void sub(Vector &u, Vector &v)
+	inline void sub(Vector& u, Vector& v)
 	{
 		x = u.x - v.x;
 		y = u.y - v.y;
 		z = u.z - v.z;
 	}
 
-	inline Vector operator - (const Vector &u) const
+	inline Vector operator - (const Vector& u) const
 	{
 		return Vector(x - u.x, y - u.y, z - u.z);
 	}
 
-	inline Vector &operator -= (const Vector &u)
+	inline Vector& operator -= (const Vector& u)
 	{
 		x -= u.x;
 		y -= u.y;
@@ -177,15 +89,15 @@ struct Vector
 		return *this;
 	}
 
-/////////////////////////////////////////////////////////
-	inline static void cross(const Vector &u, const Vector &v, Vector &w)
+	/////////////////////////////////////////////////////////
+	inline static void cross(const Vector& u, const Vector& v, Vector& w)
 	{
 		w.x = u.y * v.z - u.z * v.y;
 		w.y = u.z * v.x - u.x * v.z;
 		w.z = u.x * v.y - u.y * v.x;
 	}
 
-	inline void cross(const Vector &u, const Vector &v)
+	inline void cross(const Vector& u, const Vector& v)
 	{
 		x = u.y * v.z - u.z * v.y;
 		y = u.z * v.x - u.x * v.z;
@@ -199,7 +111,7 @@ struct Vector
 			x * v.y - y * v.x);
 	}
 
-	inline Vector operator ^ (const Vector &v) const
+	inline Vector operator ^ (const Vector& v) const
 	{
 
 		return Vector(
@@ -208,7 +120,7 @@ struct Vector
 			x * v.y - y * v.x);
 	}
 
-	inline Vector &operator ^= (const Vector &v)
+	inline Vector& operator ^= (const Vector& v)
 	{
 		Vector	t(x, y, z);
 		x = t.y * v.z - t.z * v.y;
@@ -216,29 +128,29 @@ struct Vector
 		z = t.x * v.y - t.y * v.x;
 		return *this;
 	}
-/////////////////////////////////////////////////////////
-	inline static float dot(Vector &u, Vector &v)
+	/////////////////////////////////////////////////////////
+	inline static float dot(Vector& u, Vector& v)
 	{
 		return (u.x * v.x + u.y * v.y + u.z * v.z);
 	}
 
-	inline float operator * (const Vector &u) const
+	inline float operator * (const Vector& u) const
 	{
 		return (u.x * x + u.y * y + u.z * z);
 	}
 
 
-/////////////////////////////////////////////////////////
-	Vector &operator *= (float s)
+	/////////////////////////////////////////////////////////
+	Vector& operator *= (float s)
 	{
 		x *= s;
 		y *= s;
 		z *= s;
 		return *this;
 	}
-	Vector &operator /= (float s)
+	Vector& operator /= (float s)
 	{
-		float r = 1/s;
+		float r = 1 / s;
 		x *= r;
 		y *= r;
 		z *= r;
@@ -246,23 +158,112 @@ struct Vector
 	}
 	Vector operator * (float s) const
 	{
-		return Vector(x*s, y*s, z*s);
+		return Vector(x * s, y * s, z * s);
 	}
 
 	Vector operator / (float s) const
 	{
-		float r = 1/s;
-		return Vector(x*r, y*r, z*r);
+		float r = 1 / s;
+		return Vector(x * r, y * r, z * r);
 	}
 
-	friend Vector operator * (float s, Vector &v);
+	friend Vector operator * (float s, Vector& v);
 };
 
-inline Vector operator * (float s, Vector &v)
+inline Vector operator * (float s, Vector& v)
 {
 	return Vector(v.x * s, v.y * s, v.z * s);
 }
 
+struct alignas(16) XMMVector
+{
+
+	using this_type = XMMVector;
+
+	inline XMMVector() : x(0.0f), y(0.0f), z(0.0f), w(0.0f) {}
+	//inline XMMVector(const __m128 &other) : v(other) {}
+	inline XMMVector(float x, float y, float z) : x(x), y(y), z(z), w(0.0f) {}
+	inline XMMVector(const Vector& v) : XMMVector(v.x, v.y, v.z) {}
+	union // blah
+	{
+		__m128 v;
+		struct {
+			float x, y, z, w;
+		};
+	};
+
+	// Returns Vector length of Vector V.
+	inline __m128 InverseNorm()
+	{
+		return _mm_rsqrt_ps(_mm_dp_ps(v, v, 0x77));
+	}
+
+	inline float Length()
+	{
+		// (v dot v) * 1/sqrt(v dot v)
+		auto dp = _mm_dp_ps(v, v, 0x71);
+		return _mm_cvtss_f32(_mm_mul_ss(dp , _mm_rsqrt_ss(dp)));
+	}
+
+	inline void Normalize()
+	{
+		v = _mm_mul_ps(v, InverseNorm());
+	}
+
+	//this_type(this_type &&) = default;
+
+	inline this_type& operator+=(const this_type& rhs)
+	{
+		v = _mm_add_ps(v, rhs.v);
+		return *this;
+	}
+
+	inline friend this_type operator+(this_type lhs, const this_type& rhs)
+	{
+		lhs += rhs;
+		return lhs;
+	}
+
+	inline this_type& operator-=(const this_type& rhs)
+	{
+		v = _mm_sub_ps(v, rhs.v);
+		return *this;
+	}
+
+	inline friend this_type operator-(this_type lhs, const this_type& rhs)
+	{
+		lhs -= rhs;
+		return lhs;
+	}
+
+	inline this_type& operator*=(float rhs)
+	{
+		const __m128 scalar = _mm_set1_ps(rhs);
+		v = _mm_mul_ps(v, scalar);
+		return *this;		
+	}
+
+	inline friend this_type operator*(this_type lhs, float rhs)
+	{
+		lhs *= rhs;
+		return lhs;
+	}
+
+	inline this_type& operator*=(const this_type& rhs)
+	{
+		v = _mm_mul_ps(v, rhs.v);
+		return *this;
+	}
+
+	inline friend this_type operator*(this_type lhs, const this_type& rhs)
+	{
+		lhs *= rhs;
+		return lhs;
+	}
+
+};
+
+
 #pragma pack(pop)
 
 #endif //REVIVAL_VECTOR_H
diff --git a/FDS/RENDER/RENDER.CPP b/FDS/RENDER/RENDER.CPP
index 6625433..87814a4 100644
--- a/FDS/RENDER/RENDER.CPP
+++ b/FDS/RENDER/RENDER.CPP
@@ -433,6 +433,7 @@ void Transform_Objects(Scene *Sc)
 		// postrioric Offset Vector.
 		Vector_Sub(&T->IPos,&View->ISource,&U);
 		MatrixXVector(View->Mat,&U,&S);
+
 		V.x = CntrEX*S.z+PX*S.x;
 		V.y = CntrEY*S.z-PY*S.y;
 		V.z = S.z;
@@ -735,6 +736,32 @@ AfterXForm:FEnd=T->Faces+T->FIndex;
 			//||(1) // no backface culling
 			))
 		{
+			if (0 != (F->Flags & Face_Reflective)) {
+				// clobber U1, V1, etc. with the equilateral-whatever coordinates matching
+				// the direction from camera to the specific vertex, reflected on the face's plane
+				float eu[3];
+				float ev[3];
+				size_t i = 0;
+				for (Vertex* v : { F->A, F->B, F->C }) {
+					XMMVector p = T->RotMat * v->Pos + T->IPos;
+					XMMVector d = p - View->ISource;
+					XMMVector n = T->RotMat * F->N;
+					d -= (d * n) * 2.0f * n;
+					d.Normalize();
+					float lat = acos(d.y);
+					float lon = atan2(d.z, d.x);
+					eu[i] = 0.5 + 0.5 * lon / PI;
+					ev[i] = 0.5 + 0.5 * lat / (PI / 2);
+					++i;
+				}
+
+				F->U1 = eu[0];
+				F->V1 = ev[0];
+				F->U2 = eu[1];
+				F->V2 = ev[1];
+				F->U3 = eu[2];
+				F->V3 = ev[2];
+			}
 			*Ins++ = F;
 
 #ifdef FRONT_TO_BACK_SORTING
